<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>莫小耿</title>
  
  <subtitle>积少成多</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://genghongshuo.com.cn/"/>
  <updated>2018-08-21T08:06:46.414Z</updated>
  <id>http://genghongshuo.com.cn/</id>
  
  <author>
    <name>Geng Hong Shuo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ajax中post和get的区别</title>
    <link href="http://genghongshuo.com.cn/2018/03/26/ajax%E4%B8%ADpost%E5%92%8Cget%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://genghongshuo.com.cn/2018/03/26/ajax中post和get的区别/</id>
    <published>2018-03-26T11:20:56.000Z</published>
    <updated>2018-08-21T08:06:46.414Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><a href="http://genghongshuo.com.cn/">欢迎大家去我的网站查看</a></p><h3 id="ajax中post和get的区别"><a href="#ajax中post和get的区别" class="headerlink" title="ajax中post和get的区别"></a>ajax中post和get的区别</h3><p>get和post都是向服务器发送一种请求，只是发送机制不同<br>1 GET请求会将参数跟在URL后进行传递，而POST请求则是作为HTTP消息的实体内容发送给WEB服务器。<br>2.首先是”GET方式提交的数据最多只能是1024字节”，Post传输的数据量大，可以达到2M。<br>3.get方式请求数据会被浏览器缓存起来，因此其他人就可以从浏览器的历史记录中读取到这些数据，例如账号密码等。在某种情况下，get方式会带来严重的安全问题。而post方式相对来说就可以避免这些问题。<br>4.Post请求必须设置Content-Type值为application/x-form-www-urlencoded；<br>5.发送请求时,因为Get请求的参数都在url里,所以send函数发送的参数为null,而Post请求在使用send方法时,却需赋予其参数；</p><h3 id="在服务器端的区别"><a href="#在服务器端的区别" class="headerlink" title="在服务器端的区别:"></a>在服务器端的区别:</h3><p>在客户端使用get请求时,服务器端使用Request.QueryString来获取参数,而客户端使用post请求时,服务器端使用Request.Form来获取参数.<br>HTTP标准包含这两种方法是为了达到不同的目的。POST用于创建资源，资源的内容会被编入HTTP请示的内容中。例如，处理订货表单、在数据库中加入新数据行等。</p><p>当请求无副作用时（如进行搜索），便可使用GET方法；当请求有副作用时（如添加数据行），则用POST方法。一个比较实际的问题是：GET方法可能会产生很长的URL，或许会超过某些浏览器与服务器对URL长度的限制。</p><p>若符合下列任一情况，则用POST方法：</p><ul><li>请求的结果有持续性的副作用，例如，数据库内添加新的数据行。</li><li>若使用GET方法，则表单上收集的数据可能让URL过长。</li><li>要传送的数据不是采用7位的ASCII编码。</li></ul><p>若符合下列任一情况，则用GET方法：</p><ul><li>请求是为了查找资源，HTML表单数据仅用来帮助搜索。</li><li>请求结果无持续性的副作用。</li><li>收集的数据及HTML表单内的输入字段名称的总长不超过1024个字符。<h3 id="下面用代码来说明两者的区别："><a href="#下面用代码来说明两者的区别：" class="headerlink" title="下面用代码来说明两者的区别："></a>下面用代码来说明两者的区别：</h3><h4 id="post请求"><a href="#post请求" class="headerlink" title="post请求"></a>post请求</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">postMethod</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> createXHR();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> userName = <span class="built_in">document</span>.getElementById(<span class="string">"userName"</span>).value;</span><br><span class="line">    <span class="keyword">var</span> age = <span class="built_in">document</span>.getElementById(<span class="string">"age"</span>).value;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="string">"userName="</span> + encodeURTComponent( userName ) + <span class="string">"&amp;age="</span> + encodeURTComponent( age );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不用担心缓存问题</span></span><br><span class="line">    xhr.open( <span class="string">"post"</span>, <span class="string">"example.php"</span>, <span class="literal">true</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//必须设置,否则服务器端收不到参数</span></span><br><span class="line">    xhr.setRequestHeader( <span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span> );</span><br><span class="line"></span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( xhr.readyState = <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span> )&#123;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"result"</span>).innerHTML = xhr.responseText;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送请求,要data数据</span></span><br><span class="line">    xhr.send( data );</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="git请求"><a href="#git请求" class="headerlink" title="git请求"></a>git请求</h4><p>function getMethod(){</p><pre><code>var xhr = new createXHR();var userName = document.getElementById(&quot;userName&quot;).value;var age = document.getElementById(&quot;age&quot;).value;//添加参数,以求每次访问不同的url,以避免缓存问题xhr.open( &quot;get&quot;, &quot;example.php?userName=&quot; + encodeURTComponent( userName ) + &quot;&amp;age=&quot; + encodeURTComponent( age ) + &quot;&amp;random=&quot; + Math.random(), true );xhr.onreadystatechange = function(){    if( xhr.readyState == 4 &amp;&amp; xhr.status == 200 ){        document.getElementById(&quot;result&quot;).innerHTML = xhr.responseText;    }}//发送请求,参数为nullxhr.send( null );</code></pre><p>}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://geng
      
    
    </summary>
    
      <category term="前端" scheme="http://genghongshuo.com.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://genghongshuo.com.cn/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="前端" scheme="http://genghongshuo.com.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://genghongshuo.com.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>ajaxfileupload上传</title>
    <link href="http://genghongshuo.com.cn/2018/03/20/ajaxfileupload%E4%B8%8A%E4%BC%A0/"/>
    <id>http://genghongshuo.com.cn/2018/03/20/ajaxfileupload上传/</id>
    <published>2018-03-20T04:19:00.000Z</published>
    <updated>2018-08-21T08:06:46.413Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>  在工作中使用了Jquery的ajaxFileUpload的图片上传插件，还有工作中遇到的问题，接下来问大家介绍下这个使用方法</p><h3 id="引入文件"><a href="#引入文件" class="headerlink" title="引入文件"></a>引入文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"../js/jquery-1.11.3.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"../js/ajaxfileupload.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><p>我在这里是使用的bootstrap的模态框<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"upFile"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-labelledby</span>=<span class="string">"myModalLabel"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span> <span class="attr">style</span>=<span class="string">"max-width: 600px;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">style</span>=<span class="string">"color:#31708F"</span>&gt;</span>流量产品图标上传<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span> <span class="attr">style</span>=<span class="string">"padding:20px 100px"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                    请选择文件:</span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"fileinput"</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"Filedata"</span> <span class="attr">name</span>=<span class="string">"Filedata"</span> <span class="attr">style</span>=<span class="string">"display: inline-block;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">name</span>=<span class="string">"fileuploadbtn"</span> <span class="attr">id</span>=<span class="string">"fileuploadbutton"</span> <span class="attr">class</span>=<span class="string">"btn btn-success btn-sm"</span> <span class="attr">onclick</span>=<span class="string">"return fileForm_Validator(this)"</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="js方法"><a href="#js方法" class="headerlink" title="js方法"></a>js方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fileForm_Validator</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> filedata = $(<span class="string">"#Filedata"</span>).val();</span><br><span class="line">    <span class="comment">// 获得截取文件路径后的文件名称</span></span><br><span class="line">    filedata = filedata.substr(filedata.lastIndexOf(<span class="string">"\\"</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> str = filedata;</span><br><span class="line">    <span class="comment">// 正则判断是否是图片的格式</span></span><br><span class="line">    <span class="keyword">var</span> sear = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'.+(.JPEG|.jpeg|.JPG|.jpg|.GIF|.gif|.BMP|.bmp|.PNG|.png)$'</span>); </span><br><span class="line">    <span class="keyword">if</span>($(<span class="string">'#Filedata'</span>).val() == <span class="string">''</span>||$(<span class="string">'#Filedata'</span>).val() == <span class="string">'undefined'</span>||$(<span class="string">'#Filedata'</span>).val() == <span class="literal">undefined</span>)&#123;</span><br><span class="line">        alert(<span class="string">'无可上传文件'</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sear.test(str)) &#123;</span><br><span class="line">        <span class="comment">//把文件名赋值给要提交的内容</span></span><br><span class="line">        $(<span class="string">"#accnbrs"</span>).val(filedata);</span><br><span class="line">        $.ajaxFileUpload(&#123;</span><br><span class="line">            url:<span class="string">'/cyt/flowProduct/uploadIcon'</span>,   <span class="comment">//后台方法的路径</span></span><br><span class="line">            type: <span class="string">"POST"</span>,</span><br><span class="line">            secureuri: <span class="literal">false</span>, <span class="comment">//是否需要安全协议，一般设置为false</span></span><br><span class="line">            fileElementId: <span class="string">'Filedata'</span>, <span class="comment">//文件上传域的ID</span></span><br><span class="line">            dataType: <span class="string">'json'</span>,</span><br><span class="line">            data:&#123;<span class="string">'filedata'</span>:filedata&#125;,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(data.result==<span class="number">1</span>)&#123;</span><br><span class="line">                    alert(<span class="string">'上传成功'</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    alert(<span class="string">'上传失败'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        alert(<span class="string">'请检查上传文件类型是否为图片格式'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>上传成功之后返回的数据部署json格式 而是字符串下面需要转换一下。谷歌返回的数据不一样需要特殊处理一下 </p><pre><code class="js">success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>)</span>{        <span class="keyword">var</span> data =data;        <span class="comment">// 判断是否是谷哥浏览器  对data进行截取</span>        <span class="keyword">if</span>(navigator.userAgent.indexOf(<span class="string">"Chrome"</span>) &gt; <span class="number">-1</span>){            data= data.match(<span class="regexp">/\{[^\}]+\}/</span>)[<span class="number">0</span>]; <span class="comment">// 直截取{}中的内容</span>        }        dataJson = <span class="built_in">JSON</span>.parse(data);        <span class="keyword">if</span>(dataJson.result==<span class="number">1</span>){            $(<span class="string">'#upFile'</span>).modal(<span class="string">'hide'</span>);            $(<span class="string">"#iconUrl"</span>).val(dataJson.resultMsg);            alert(<span class="string">'上传成功'</span>);        }<span class="keyword">else</span>{            alert(dataJson.resultMsg);        }    }</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;  在工作中使用了Jquery的ajax
      
    
    </summary>
    
      <category term="前端" scheme="http://genghongshuo.com.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://genghongshuo.com.cn/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="前端" scheme="http://genghongshuo.com.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://genghongshuo.com.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>sort用法总结</title>
    <link href="http://genghongshuo.com.cn/2018/03/01/sort/"/>
    <id>http://genghongshuo.com.cn/2018/03/01/sort/</id>
    <published>2018-03-01T04:19:56.000Z</published>
    <updated>2018-08-21T08:06:46.424Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="/images/sort.jpg" alt="sort用法总结"><br><a id="more"></a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>sort() 方法用于对数组的元素进行排序,并返回数组。</p><h3 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h3><p>返回介于 0（包含） ~ 1（不包含） 之间的一个随机数： Number<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> arr1 = <span class="built_in">Math</span>.random();</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">在本例中，我们将取得介于 1 到 100 之间的一个整数：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="built_in">Math</span>.floor((<span class="built_in">Math</span>.random() * <span class="number">100</span>) + <span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><h3 id="随机排序"><a href="#随机排序" class="headerlink" title="随机排序"></a>随机排序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span>; <span class="comment">// 随机选取</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="升降排序"><a href="#升降排序" class="headerlink" title="升降排序"></a>升降排序</h3><p>语法：arrayObject.sort(sortby)；</p><h4 id="升序排序"><a href="#升序排序" class="headerlink" title="升序排序"></a>升序排序</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortNumber</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arrSort = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">6</span>);</span><br><span class="line">arrSort[<span class="number">0</span>] = <span class="string">"10"</span>;</span><br><span class="line">arrSort[<span class="number">1</span>] = <span class="string">"100"</span>;</span><br><span class="line">arrSort[<span class="number">2</span>] = <span class="string">"40"</span>;</span><br><span class="line">arrSort[<span class="number">3</span>] = <span class="string">"15"</span>;</span><br><span class="line">arrSort[<span class="number">4</span>] = <span class="string">"10000"</span>;</span><br><span class="line">arrSort[<span class="number">5</span>] = <span class="string">"1"</span>;</span><br><span class="line"><span class="built_in">document</span>.write(arrSort + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(arrSort.sort(sortNumber));</span><br><span class="line"><span class="comment">//  1,10,15,40,100,10000</span></span><br></pre></td></tr></table></figure><h4 id="降序排序"><a href="#降序排序" class="headerlink" title="降序排序"></a>降序排序</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortNumber</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b - a </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arrSort = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">6</span>);</span><br><span class="line">arrSort[<span class="number">0</span>] = <span class="string">"10"</span>;</span><br><span class="line">arrSort[<span class="number">1</span>] = <span class="string">"100"</span>;</span><br><span class="line">arrSort[<span class="number">2</span>] = <span class="string">"40"</span>;</span><br><span class="line">arrSort[<span class="number">3</span>] = <span class="string">"15"</span>;</span><br><span class="line">arrSort[<span class="number">4</span>] = <span class="string">"10000"</span>;</span><br><span class="line">arrSort[<span class="number">5</span>] = <span class="string">"1"</span>;</span><br><span class="line"><span class="built_in">document</span>.write(arrSort + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(arrSort.sort(sortNumber));</span><br><span class="line"></span><br><span class="line"><span class="comment">//  10000,100,40,15,10,1</span></span><br></pre></td></tr></table></figure><h3 id="数组对象某个属性排序"><a href="#数组对象某个属性排序" class="headerlink" title="数组对象某个属性排序"></a>数组对象某个属性排序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr4 = [&#123;</span><br><span class="line">        name: <span class="string">'ping'</span>,</span><br><span class="line">        age: <span class="number">2</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: <span class="string">'guo'</span>,</span><br><span class="line">        age: <span class="number">10</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: <span class="string">'hao'</span>,</span><br><span class="line">        age: <span class="number">5</span></span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">arrSort</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> value1 = a[num];</span><br><span class="line">            <span class="keyword">var</span> value2 = b[num];</span><br><span class="line">            <span class="keyword">return</span> value1 - value2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(arr4.sort(arrSort(<span class="string">'age'</span>)));</span><br></pre></td></tr></table></figure><p><img src="/images/sort1.png" alt="数组对象某个属性排序"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/sort.jpg&quot; alt=&quot;sort用法总结&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://genghongshuo.com.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://genghongshuo.com.cn/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
      <category term="前端" scheme="http://genghongshuo.com.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="http://genghongshuo.com.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>nginx配置详情</title>
    <link href="http://genghongshuo.com.cn/2018/02/27/nginx%E9%85%8D%E7%BD%AE%E8%AF%A6%E6%83%85/"/>
    <id>http://genghongshuo.com.cn/2018/02/27/nginx配置详情/</id>
    <published>2018-02-27T03:39:56.000Z</published>
    <updated>2018-08-21T08:06:46.422Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="/images/nginx.jpg" alt="webpack"><br><a id="more"></a></p><h3 id="Nginx简介"><a href="#Nginx简介" class="headerlink" title="Nginx简介"></a>Nginx简介</h3><p>   Nginx是一款开源代码的高性能HTTP服务器和反向代理服务器，同时支持IMAP/POP3/SMTP代理服务</p><h4 id="Nginx工作原理"><a href="#Nginx工作原理" class="headerlink" title="Nginx工作原理"></a>Nginx工作原理</h4><pre><code>Nginx由内核和模块组成，完成工作是通过查找配置文件将客户端请求映射到一个location block(location是用于URL匹配的命令)，location配置的命令会启动不同模块完成工作。Nginx模块分为核心模块，基础模块和第三方模块。    核心模块：HTTP模块、EVENT模块(事件)、MAIL模块。    基础模块：HTTP Access模块、HTTP FastCGI模块、HTTP Proxy模块、HTTP Rewrite模块。    第三方模块：HTTP Upstream Request Hash模块、Notice模块、HTTP Access Key模块。</code></pre><h4 id="性能优势"><a href="#性能优势" class="headerlink" title="性能优势"></a>性能优势</h4><pre><code>web服务器，处理静态文件、索引文件以及自动索引效率高。代理服务器，快速高效反向代理，提升网站性能。负载均衡器，内部支持Rails和PHP,也可支持HTTP代理服务器，对外进行服务。同时支持简单容错和利用算法进行负载均衡。性能方面，Nginx专门为性能设计，实现注重效率。采用Poll模型，可以支持更多的并发连接，并在大并发时占用很低内存。稳定性方面，采用分阶段资源分配技术，使CPU资源占用率低。高可用性方面，支持热备，启动迅速。</code></pre><h3 id="Nginx编译安装-配置文件详解"><a href="#Nginx编译安装-配置文件详解" class="headerlink" title="Nginx编译安装,配置文件详解"></a>Nginx编译安装,配置文件详解</h3><h4 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h4><p> 安装部署nginx所用到的安装工具和相关库<br>默认安装的http_rewrite_module（使用正则对请求重写）需pcre库<br>默认安装的httP_gzip_module（Gzip压缩）需zlib库<br>安装http_ssl_module(HTTPS/SLL)需openssl库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure></p><p>下载nginx源码包，并解压<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.10.3.tar.gz</span><br><span class="line">tar -zxvf nginx-1.10.3.tar.gz</span><br><span class="line">cd nginx-1.10.3</span><br></pre></td></tr></table></figure></p><p>设置参数 参数具体参考《Nginx编译参数》<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--prefix=/usr/local/nginx \</span><br><span class="line">--with-http_ssl_module</span><br></pre></td></tr></table></figure></p><p>编译并安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br><span class="line">#### Nginx配置文件（/usr/local/nginx/conf/nginx.conf）</span><br></pre></td></tr></table></figure></p><p>   配置文件主要由四部分组成：main(全区设置)，server(主机配置)，upstream(负载均衡服务器设置)，和location(URL匹配特定位置设置)。</p><h5 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h5><p>#Nginx的worker进程运行用户以及用户组</p><p>#user  nobody nobody;</p><p>#Nginx开启的进程数<br>worker_processes  1;</p><p>#worker_processes auto;</p><p>#以下参数指定了哪个cpu分配给哪个进程，一般来说不用特殊指定。如果一定要设的话，用0和1指定分配方式.</p><p>#这样设就是给1-4个进程分配单独的核来运行，出现第5个进程是就是随机分配了。<br>eg:</p><p>#worker_processes 4     #4核CPU </p><p>#worker_cpu_affinity 0001 0010 0100 1000</p><p>#定义全局错误日志定义类型，[debug|info|notice|warn|crit]</p><p>#error_log  logs/error.log  info;</p><p>#指定进程ID存储文件位置</p><p>#pid        logs/nginx.pid;</p><p>#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n的值保持一致。</p><p>#vim /etc/security/limits.conf</p><ul><li>soft    nproc          65535</li><li>hard    nproc          65535</li><li>soft    nofile         65535</li><li>hard    nofile         65535<br>worker_rlimit_nofile 65535;<h5 id="事件配置"><a href="#事件配置" class="headerlink" title="事件配置"></a>事件配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">    #use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。</span><br><span class="line">    use epoll;</span><br><span class="line">    #每个进程可以处理的最大连接数，理论上每台nginx服务器的最大连接数为worker_processes*worker_connections。理论值：worker_rlimit_nofile/worker_processes</span><br><span class="line">    #注意：最大客户数也由系统的可用socket连接数限制（~ 64K），所以设置不切实际的高没什么好处</span><br><span class="line">    worker_connections  65535;    </span><br><span class="line">    #worker工作方式：串行（一定程度降低负载，但服务器吞吐量大时，关闭使用并行方式）</span><br><span class="line">    #multi_accept on; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="http参数"><a href="#http参数" class="headerlink" title="http参数"></a>http参数</h5><p>文件扩展名与文件类型映射表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include mime.types;</span><br></pre></td></tr></table></figure></p><p>默认文件类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#default_type application/octet-stream;</span><br></pre></td></tr></table></figure></p><h5 id="日志相关定义"><a href="#日志相关定义" class="headerlink" title="日志相关定义"></a>日志相关定义</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">#                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">#                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line">#定义日志的格式。后面定义要输出的内容。</span><br><span class="line">#1.$remote_addr 与$http_x_forwarded_for 用以记录客户端的ip地址；</span><br><span class="line">#2.$remote_user ：用来记录客户端用户名称；</span><br><span class="line">#3.$time_local ：用来记录访问时间与时区；</span><br><span class="line">#4.$request  ：用来记录请求的url与http协议；</span><br><span class="line">#5.$status ：用来记录请求状态； </span><br><span class="line">#6.$body_bytes_sent ：记录发送给客户端文件主体内容大小；</span><br><span class="line">#7.$http_referer ：用来记录从那个页面链接访问过来的；</span><br><span class="line">#8.$http_user_agent ：记录客户端浏览器的相关信息</span><br><span class="line">#连接日志的路径，指定的日志格式放在最后。</span><br><span class="line">#access_log  logs/access.log  main;</span><br><span class="line">#只记录更为严重的错误日志，减少IO压力</span><br><span class="line">error_log logs/error.log crit;</span><br><span class="line">#关闭日志</span><br><span class="line">#access_log  off;</span><br><span class="line"></span><br><span class="line">#默认编码</span><br><span class="line">#charset utf-8;</span><br><span class="line">#服务器名字的hash表大小</span><br><span class="line">server_names_hash_bucket_size 128;</span><br><span class="line">#客户端请求单个文件的最大字节数</span><br><span class="line">client_max_body_size 8m;</span><br><span class="line">#指定来自客户端请求头的hearerbuffer大小</span><br><span class="line">client_header_buffer_size 32k;</span><br><span class="line">#指定客户端请求中较大的消息头的缓存最大数量和大小。</span><br><span class="line">large_client_header_buffers 4 64k;</span><br><span class="line">#开启高效传输模式。</span><br><span class="line">sendfile        on;</span><br><span class="line">#防止网络阻塞</span><br><span class="line">tcp_nopush on;</span><br><span class="line">tcp_nodelay on;</span><br><span class="line"></span><br><span class="line">#客户端连接超时时间，单位是秒</span><br><span class="line">keepalive_timeout 60;</span><br><span class="line">#客户端请求头读取超时时间</span><br><span class="line">client_header_timeout 10;</span><br><span class="line">#设置客户端请求主体读取超时时间</span><br><span class="line">client_body_timeout 10;</span><br><span class="line">#响应客户端超时时间</span><br><span class="line">send_timeout 10;</span><br></pre></td></tr></table></figure><h5 id="FastCGI相关参数"><a href="#FastCGI相关参数" class="headerlink" title="FastCGI相关参数"></a>FastCGI相关参数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fastcgi_connect_timeout 300;</span><br><span class="line">fastcgi_send_timeout 300;</span><br><span class="line">fastcgi_read_timeout 300;</span><br><span class="line">fastcgi_buffer_size 64k;</span><br><span class="line">fastcgi_buffers 4 64k;</span><br><span class="line">fastcgi_busy_buffers_size 128k;</span><br><span class="line">fastcgi_temp_file_write_size 128k;</span><br></pre></td></tr></table></figure><h5 id="gzip模块设置"><a href="#gzip模块设置" class="headerlink" title="gzip模块设置"></a>gzip模块设置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    #开启gzip压缩输出</span><br><span class="line">    gzip on; </span><br><span class="line">    #最小压缩文件大小</span><br><span class="line">    gzip_min_length 1k; </span><br><span class="line">    #压缩缓冲区</span><br><span class="line">    gzip_buffers 4 16k;</span><br><span class="line">    #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span><br><span class="line">    gzip_http_version 1.0;</span><br><span class="line">    #压缩等级 1-9 等级越高，压缩效果越好，节约宽带，但CPU消耗大</span><br><span class="line">    gzip_comp_level 2;</span><br><span class="line">    #压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><br><span class="line">    gzip_types text/plain application/x-javascript text/css application/xml;</span><br><span class="line">    #前端缓存服务器缓存经过压缩的页面</span><br><span class="line">    </span><br><span class="line">gzip_vary on;</span><br></pre></td></tr></table></figure><h3 id="虚拟主机基本设置"><a href="#虚拟主机基本设置" class="headerlink" title="虚拟主机基本设置"></a>虚拟主机基本设置</h3><h4 id="虚拟主机定义"><a href="#虚拟主机定义" class="headerlink" title="虚拟主机定义"></a>虚拟主机定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    #监听端口</span><br><span class="line">    listen       80;</span><br><span class="line">    #访问域名</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    #编码格式，若网页格式与此不同，将被自动转码</span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    #虚拟主机访问日志定义</span><br><span class="line">    #access_log  logs/host.access.log  main;</span><br><span class="line">    #对URL进行匹配</span><br><span class="line">    location / &#123;</span><br><span class="line">        #访问路径，可相对也可绝对路径</span><br><span class="line">        root   html;</span><br><span class="line">        #首页文件。以下按顺序匹配</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="错误信息返回页面"><a href="#错误信息返回页面" class="headerlink" title="错误信息返回页面"></a>错误信息返回页面</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#error_page  404              /404.html;</span><br><span class="line"># redirect server error pages to the static page /50x.html</span><br><span class="line">#</span><br><span class="line">error_page   500 502 503 504  /50x.html;</span><br><span class="line">location = /50x.html &#123;</span><br><span class="line">    root   html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="访问URL以"><a href="#访问URL以" class="headerlink" title="访问URL以"></a>访问URL以</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">#</span><br><span class="line">#location ~ \.php$ &#123;</span><br><span class="line">#    proxy_pass   http://127.0.0.1;</span><br><span class="line">#&#125;</span><br></pre></td></tr></table></figure><h4 id="php脚本请求全部转发给FastCGI处理"><a href="#php脚本请求全部转发给FastCGI处理" class="headerlink" title="php脚本请求全部转发给FastCGI处理"></a>php脚本请求全部转发给FastCGI处理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">#</span><br><span class="line">#location ~ \.php$ &#123;</span><br><span class="line">#    root           html;</span><br><span class="line">#    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">#    fastcgi_index  index.php;</span><br><span class="line">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">#    include        fastcgi_params;</span><br><span class="line">#&#125;</span><br></pre></td></tr></table></figure><h4 id="禁止访问"><a href="#禁止访问" class="headerlink" title="禁止访问"></a>禁止访问</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">    # concurs with nginx&apos;s one</span><br><span class="line">    #</span><br><span class="line">    #location ~ /\.ht &#123;</span><br><span class="line">    #    deny  all;</span><br><span class="line">    #&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HTTPS虚拟主机定义"><a href="#HTTPS虚拟主机定义" class="headerlink" title="HTTPS虚拟主机定义"></a>HTTPS虚拟主机定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># HTTPS server</span><br><span class="line">#</span><br><span class="line">#server &#123;</span><br><span class="line">#    listen       443 ssl;</span><br><span class="line">#    server_name  localhost;</span><br><span class="line">#    ssl_certificate      cert.pem;</span><br><span class="line">#    ssl_certificate_key  cert.key;</span><br><span class="line">#    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">#    ssl_session_timeout  5m;</span><br><span class="line">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">#    ssl_prefer_server_ciphers  on;</span><br><span class="line">#    location / &#123;</span><br><span class="line">#        root   html;</span><br><span class="line">#        index  index.html index.htm;</span><br><span class="line">#    &#125;</span><br><span class="line">#&#125;</span><br></pre></td></tr></table></figure><h4 id="Nignx状态监控"><a href="#Nignx状态监控" class="headerlink" title="Nignx状态监控"></a>Nignx状态监控</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#Nginx运行状态，StubStatus模块获取Nginx自启动的工作状态（编译时要开启对应功能）</span><br><span class="line">        #location /NginxStatus &#123;</span><br><span class="line">        #    #启用StubStatus的工作访问状态    </span><br><span class="line">        #    stub_status    on;</span><br><span class="line">        #    #指定StubStaus模块的访问日志文件</span><br><span class="line">        #    access_log    logs/Nginxstatus.log;</span><br><span class="line">        #    #Nginx认证机制（需Apache的htpasswd命令生成）</span><br><span class="line">        #    #auth_basic    &quot;NginxStatus&quot;;</span><br><span class="line">        #    #用来认证的密码文件</span><br><span class="line">        #    #auth_basic_user_file    ../htpasswd;    </span><br><span class="line">        #&#125;</span><br><span class="line">访问：http://IP/NginxStatus(测试就不加密码验证相关)</span><br></pre></td></tr></table></figure><h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><p>#以下配置追加在HTTP的全局变量中</p><p>#nginx跟后端服务器连接超时时间(代理连接超时)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_connect_timeout      5;</span><br></pre></td></tr></table></figure></p><p>#后端服务器数据回传时间(代理发送超时)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_send_timeout         5;</span><br></pre></td></tr></table></figure></p><p>#连接成功后，后端服务器响应时间(代理接收超时)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_read_timeout         60;</span><br></pre></td></tr></table></figure></p><p>#设置代理服务器（nginx）保存用户头信息的缓冲区大小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proxy_buffer_size          16k;</span><br><span class="line">#proxy_buffers缓冲区，网页平均在32k以下的话，这样设置</span><br><span class="line">proxy_buffers              4 32k;</span><br></pre></td></tr></table></figure></p><p>#高负荷下缓冲大小（proxy_buffers*2）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_busy_buffers_size    64k;</span><br></pre></td></tr></table></figure></p><p>#设定缓存文件夹大小，大于这个值，将从upstream服务器传<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_temp_file_write_size 64k;</span><br></pre></td></tr></table></figure></p><p>#反向代理缓存目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">proxy_cache_path /data/proxy/cache levels=1:2 keys_zone=cache_one:500m inactive=1d max_size=1g;</span><br><span class="line">#levels=1:2 设置目录深度，第一层目录是1个字符，第2层是2个字符</span><br><span class="line">#keys_zone:设置web缓存名称和内存缓存空间大小</span><br><span class="line">#inactive:自动清除缓存文件时间。</span><br><span class="line">#max_size:硬盘空间最大可使用值。</span><br><span class="line">#指定临时缓存文件的存储路径(路径需和上面路径在同一分区)</span><br><span class="line">proxy_temp_path </span><br><span class="line">/data/proxy/temp</span><br></pre></td></tr></table></figure></p><h4 id="服务配置"><a href="#服务配置" class="headerlink" title="服务配置"></a>服务配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    #侦听的80端口</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">        #反向代理缓存设置命令(proxy_cache zone|off,默认关闭所以要设置)</span><br><span class="line">        proxy_cache cache_one;</span><br><span class="line">        #对不同的状态码缓存不同时间</span><br><span class="line">        proxy_cache_valid 200 304 12h;</span><br><span class="line">        #设置以什么样参数获取缓存文件名</span><br><span class="line">        proxy_cache_key $host$uri$is_args$args;</span><br><span class="line">        #后7端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr; </span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; </span><br><span class="line">  </span><br><span class="line">        #代理设置</span><br><span class="line">        proxy_pass   http://IP; </span><br><span class="line">        #文件过期时间控制</span><br><span class="line">        expires    1d;</span><br><span class="line">    &#125;</span><br><span class="line">    #配置手动清楚缓存(实现此功能需第三方模块 ngx_cache_purge)</span><br><span class="line">    #http://www.123.com/2017/0316/17.html访问</span><br><span class="line">    #http://www.123.com/purge/2017/0316/17.html清楚URL缓存</span><br><span class="line">    location ~ /purge(/.*) &#123;</span><br><span class="line">        allow    127.0.0.1;</span><br><span class="line">        deny    all;</span><br><span class="line">        proxy_cache_purge    cache_one    $host$1$is_args$args;</span><br><span class="line">    &#125;</span><br><span class="line">    #设置扩展名以.jsp、.php、.jspx结尾的动态应用程序不做缓存</span><br><span class="line">    location ~.*\.(jsp|php|jspx)?$ &#123; </span><br><span class="line">        proxy_set_header Host $host; </span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr; </span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; </span><br><span class="line">  </span><br><span class="line">        proxy_pass http://http://IP;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><h5 id="负载均衡服务器池"><a href="#负载均衡服务器池" class="headerlink" title="负载均衡服务器池"></a>负载均衡服务器池</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">upstream my_server_pool &#123;</span><br><span class="line">    #调度算法</span><br><span class="line">    #1.轮循（默认）（weight轮循权值）</span><br><span class="line">    #2.ip_hash：根据每个请求访问IP的hash结果分配。（会话保持）</span><br><span class="line">    #3.fair:根据后端服务器响应时间最短请求。（upstream_fair模块）</span><br><span class="line">    #4.url_hash:根据访问的url的hash结果分配。（需hash软件包）</span><br><span class="line">    #参数：</span><br><span class="line">    #down：表示不参与负载均衡</span><br><span class="line">    #backup:备份服务器</span><br><span class="line">    #max_fails:允许最大请求错误次数</span><br><span class="line">    #fail_timeout:请求失败后暂停服务时间。</span><br><span class="line">    server 192.168.1.109:80 weight=1 max_fails=2 fail_timeout=30;</span><br><span class="line">    server 192.168.1.108:80 weight=2 max_fails=2 fail_timeout=30;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="负载均衡调用"><a href="#负载均衡调用" class="headerlink" title="负载均衡调用"></a>负载均衡调用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    ...</span><br><span class="line">    location / &#123;</span><br><span class="line">    proxy_pass http://my_server_pool;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="URL重写"><a href="#URL重写" class="headerlink" title="URL重写"></a>URL重写</h4><p>#根据不同的浏览器URL重写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if($http_user_agent ~ Firefox)&#123;</span><br><span class="line">rewrite ^(.*)$  /firefox/$1 break; </span><br><span class="line">&#125;</span><br><span class="line">if($http_user_agent ~ MSIE)&#123;</span><br><span class="line">rewrite ^(.*)$  /msie/$1 break; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="实现域名跳转"><a href="#实现域名跳转" class="headerlink" title="实现域名跳转"></a>实现域名跳转</h4><p>location / {<br>    rewrite ^/(.*)$ <a href="https://web8.example.com$1" target="_blank" rel="noopener">https://web8.example.com$1</a> permanent;<br>}</p><h4 id="IP限制"><a href="#IP限制" class="headerlink" title="IP限制"></a>IP限制</h4><p> #限制IP访问<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    deny 192.168.0.2；</span><br><span class="line">    allow 192.168.0.0/24;</span><br><span class="line">    allow 192.168.1.1;</span><br><span class="line">    deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Nginx相关命令"><a href="#Nginx相关命令" class="headerlink" title="Nginx相关命令"></a>Nginx相关命令</h3><p>#启动nginx<br>nginx </p><p>#关闭nginx<br>nginx -s stop</p><p>#平滑重启<br>kill -HUP <code>cat /usr/local/nginx/logs/nginx.pid</code></p><h3 id="nginx-conf中文详解"><a href="#nginx-conf中文详解" class="headerlink" title="nginx.conf中文详解"></a>nginx.conf中文详解</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br></pre></td><td class="code"><pre><span class="line">#定义Nginx运行的用户和用户组</span><br><span class="line">user www www;</span><br><span class="line"></span><br><span class="line">#nginx进程数，建议设置为等于CPU总核心数。</span><br><span class="line">worker_processes <span class="number">8</span>;</span><br><span class="line"> </span><br><span class="line">#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span><br><span class="line">error_log /usr/local/nginx/logs/error.log info;</span><br><span class="line"></span><br><span class="line">#进程pid文件</span><br><span class="line">pid /usr/local/nginx/logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">#指定进程可以打开的最大描述符：数目</span><br><span class="line">#工作模式与连接数上限</span><br><span class="line">#这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。</span><br><span class="line">#现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。</span><br><span class="line">#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。</span><br><span class="line">worker_rlimit_nofile <span class="number">65535</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events</span><br><span class="line">&#123;</span><br><span class="line">    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型</span><br><span class="line">    #是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。</span><br><span class="line">    #补充说明：</span><br><span class="line">    #与apache相类，nginx针对不同的操作系统，有不同的事件模型</span><br><span class="line">    #A）标准事件模型</span><br><span class="line">    #Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll</span><br><span class="line">    #B）高效事件模型</span><br><span class="line">    #Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。</span><br><span class="line">    #Epoll：使用于Linux内核2.6版本及以后的系统。</span><br><span class="line">    #/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。</span><br><span class="line">    #Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。</span><br><span class="line">    use epoll;</span><br><span class="line"></span><br><span class="line">    #单个进程最大连接数（最大连接数=连接数*进程数）</span><br><span class="line">    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。</span><br><span class="line">    worker_connections <span class="number">65535</span>;</span><br><span class="line"></span><br><span class="line">    #keepalive超时时间。</span><br><span class="line">    keepalive_timeout <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。</span><br><span class="line">    #分页大小可以用命令getconf PAGESIZE 取得。</span><br><span class="line">    #[root@web001 ~]# getconf PAGESIZE</span><br><span class="line">    #4096</span><br><span class="line">    #但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。</span><br><span class="line">    client_header_buffer_size <span class="number">4</span>k;</span><br><span class="line"></span><br><span class="line">    #这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</span><br><span class="line">    open_file_cache max=<span class="number">65535</span> inactive=<span class="number">60</span>s;</span><br><span class="line"></span><br><span class="line">    #这个是指多长时间检查一次缓存的有效信息。</span><br><span class="line">    #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.</span><br><span class="line">    open_file_cache_valid <span class="number">80</span>s;</span><br><span class="line"></span><br><span class="line">    #open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</span><br><span class="line">    #语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.</span><br><span class="line">    open_file_cache_min_uses <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    #语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件是记录cache错误.</span><br><span class="line">    open_file_cache_errors on;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span><br><span class="line">http</span><br><span class="line">&#123;</span><br><span class="line">    #文件扩展名与文件类型映射表</span><br><span class="line">    include mime.types;</span><br><span class="line"></span><br><span class="line">    #默认文件类型</span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #默认编码</span><br><span class="line">    #charset utf-8;</span><br><span class="line"></span><br><span class="line">    #服务器名字的hash表大小</span><br><span class="line">    #保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.</span><br><span class="line">    server_names_hash_bucket_size <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</span><br><span class="line">    client_header_buffer_size <span class="number">32</span>k;</span><br><span class="line"></span><br><span class="line">    #客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。</span><br><span class="line">    large_client_header_buffers <span class="number">4</span> <span class="number">64</span>k;</span><br><span class="line"></span><br><span class="line">    #设定通过nginx上传文件的大小</span><br><span class="line">    client_max_body_size <span class="number">8</span>m;</span><br><span class="line"></span><br><span class="line">    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span><br><span class="line">    #sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。</span><br><span class="line">    sendfile on;</span><br><span class="line"></span><br><span class="line">    #开启目录列表访问，合适下载服务器，默认关闭。</span><br><span class="line">    autoindex on;</span><br><span class="line"></span><br><span class="line">    #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span><br><span class="line">    tcp_nopush on;</span><br><span class="line">     </span><br><span class="line">    tcp_nodelay on;</span><br><span class="line"></span><br><span class="line">    #长连接超时时间，单位是秒</span><br><span class="line">    keepalive_timeout <span class="number">120</span>;</span><br><span class="line"></span><br><span class="line">    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span><br><span class="line">    fastcgi_connect_timeout <span class="number">300</span>;</span><br><span class="line">    fastcgi_send_timeout <span class="number">300</span>;</span><br><span class="line">    fastcgi_read_timeout <span class="number">300</span>;</span><br><span class="line">    fastcgi_buffer_size <span class="number">64</span>k;</span><br><span class="line">    fastcgi_buffers <span class="number">4</span> <span class="number">64</span>k;</span><br><span class="line">    fastcgi_busy_buffers_size <span class="number">128</span>k;</span><br><span class="line">    fastcgi_temp_file_write_size <span class="number">128</span>k;</span><br><span class="line"></span><br><span class="line">    #gzip模块设置</span><br><span class="line">    gzip on; #开启gzip压缩输出</span><br><span class="line">    gzip_min_length 1k;    #最小压缩文件大小</span><br><span class="line">    gzip_buffers 4 16k;    #压缩缓冲区</span><br><span class="line">    gzip_http_version 1.0;    #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span><br><span class="line">    gzip_comp_level 2;    #压缩等级</span><br><span class="line">    gzip_types text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><br><span class="line">    gzip_vary on;</span><br><span class="line"></span><br><span class="line">    #开启限制IP连接数的时候需要使用</span><br><span class="line">    #limit_zone crawler $binary_remote_addr 10m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #负载均衡配置</span><br><span class="line">    upstream piao.jd.com &#123;</span><br><span class="line">     </span><br><span class="line">        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span><br><span class="line">        server <span class="number">192.168</span><span class="number">.80</span><span class="number">.121</span>:<span class="number">80</span> weight=<span class="number">3</span>;</span><br><span class="line">        server <span class="number">192.168</span><span class="number">.80</span><span class="number">.122</span>:<span class="number">80</span> weight=<span class="number">2</span>;</span><br><span class="line">        server <span class="number">192.168</span><span class="number">.80</span><span class="number">.123</span>:<span class="number">80</span> weight=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        #nginx的upstream目前支持4种方式的分配</span><br><span class="line">        #1、轮询（默认）</span><br><span class="line">        #每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span><br><span class="line">        #2、weight</span><br><span class="line">        #指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</span><br><span class="line">        #例如：</span><br><span class="line">        #upstream bakend &#123;</span><br><span class="line">        #    server 192.168.0.14 weight=10;</span><br><span class="line">        #    server 192.168.0.15 weight=10;</span><br><span class="line">        #&#125;</span><br><span class="line">        #2、ip_hash</span><br><span class="line">        #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span><br><span class="line">        #例如：</span><br><span class="line">        #upstream bakend &#123;</span><br><span class="line">        #    ip_hash;</span><br><span class="line">        #    server 192.168.0.14:88;</span><br><span class="line">        #    server 192.168.0.15:80;</span><br><span class="line">        #&#125;</span><br><span class="line">        #3、fair（第三方）</span><br><span class="line">        #按后端服务器的响应时间来分配请求，响应时间短的优先分配。</span><br><span class="line">        #upstream backend &#123;</span><br><span class="line">        #    server server1;</span><br><span class="line">        #    server server2;</span><br><span class="line">        #    fair;</span><br><span class="line">        #&#125;</span><br><span class="line">        #4、url_hash（第三方）</span><br><span class="line">        #按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</span><br><span class="line">        #例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</span><br><span class="line">        #upstream backend &#123;</span><br><span class="line">        #    server squid1:3128;</span><br><span class="line">        #    server squid2:3128;</span><br><span class="line">        #    hash $request_uri;</span><br><span class="line">        #    hash_method crc32;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        #tips:</span><br><span class="line">        #upstream bakend&#123;#定义负载均衡设备的Ip及设备状态&#125;&#123;</span><br><span class="line">        #    ip_hash;</span><br><span class="line">        #    server 127.0.0.1:9090 down;</span><br><span class="line">        #    server 127.0.0.1:8080 weight=2;</span><br><span class="line">        #    server 127.0.0.1:6060;</span><br><span class="line">        #    server 127.0.0.1:7070 backup;</span><br><span class="line">        #&#125;</span><br><span class="line">        #在需要使用负载均衡的server中增加 proxy_pass http://bakend/;</span><br><span class="line"></span><br><span class="line">        #每个设备的状态设置为:</span><br><span class="line">        #1.down表示单前的server暂时不参与负载</span><br><span class="line">        #2.weight为weight越大，负载的权重就越大。</span><br><span class="line">        #3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误</span><br><span class="line">        #4.fail_timeout:max_fails次失败后，暂停的时间。</span><br><span class="line">        #5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span><br><span class="line"></span><br><span class="line">        #nginx支持同时设置多组的负载均衡，用来给不用的server来使用。</span><br><span class="line">        #client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug</span><br><span class="line">        #client_body_temp_path设置记录文件的目录 可以设置最多3层目录</span><br><span class="line">        #location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    #虚拟主机的配置</span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line">        #监听端口</span><br><span class="line">        listen <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">        #域名可以有多个，用空格隔开</span><br><span class="line">        server_name www.jd.com jd.com;</span><br><span class="line">        index index.html index.htm index.php;</span><br><span class="line">        root /data/www/jd;</span><br><span class="line"></span><br><span class="line">        #对******进行负载均衡</span><br><span class="line">        location ~ .*.(php|php5)?$</span><br><span class="line">        &#123;</span><br><span class="line">            fastcgi_pass <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">9000</span>;</span><br><span class="line">            fastcgi_index index.php;</span><br><span class="line">            include fastcgi.conf;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        #图片缓存时间设置</span><br><span class="line">        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">        &#123;</span><br><span class="line">            expires <span class="number">10</span>d;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        #JS和CSS缓存时间设置</span><br><span class="line">        location ~ .*.(js|css)?$</span><br><span class="line">        &#123;</span><br><span class="line">            expires <span class="number">1</span>h;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        #日志格式设定</span><br><span class="line">        #$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；</span><br><span class="line">        #$remote_user：用来记录客户端用户名称；</span><br><span class="line">        #$time_local： 用来记录访问时间与时区；</span><br><span class="line">        #$request： 用来记录请求的url与http协议；</span><br><span class="line">        #$status： 用来记录请求状态；成功是200，</span><br><span class="line">        #$body_bytes_sent ：记录发送给客户端文件主体内容大小；</span><br><span class="line">        #$http_referer：用来记录从那个页面链接访问过来的；</span><br><span class="line">        #$http_user_agent：记录客户浏览器的相关信息；</span><br><span class="line">        #通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。</span><br><span class="line">        log_format access <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">        <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">        <span class="string">'"$http_user_agent" $http_x_forwarded_for'</span>;</span><br><span class="line">         </span><br><span class="line">        #定义本虚拟主机的访问日志</span><br><span class="line">        access_log  /usr/local/nginx/logs/host.access.log  main;</span><br><span class="line">        access_log  /usr/local/nginx/logs/host.access<span class="number">.404</span>.log  log404;</span><br><span class="line">         </span><br><span class="line">        #对 "/" 启用反向代理</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http:<span class="comment">//127.0.0.1:88;</span></span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">             </span><br><span class="line">            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">             </span><br><span class="line">            #以下是一些反向代理的配置，可选。</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line"></span><br><span class="line">            #允许客户端请求的最大单文件字节数</span><br><span class="line">            client_max_body_size <span class="number">10</span>m;</span><br><span class="line"></span><br><span class="line">            #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class="line">            #如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。</span><br><span class="line">            #无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误</span><br><span class="line">            client_body_buffer_size <span class="number">128</span>k;</span><br><span class="line"></span><br><span class="line">            #表示使nginx阻止HTTP应答代码为400或者更高的应答。</span><br><span class="line">            proxy_intercept_errors on;</span><br><span class="line"></span><br><span class="line">            #后端服务器连接的超时时间_发起握手等候响应超时时间</span><br><span class="line">            #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class="line">            proxy_connect_timeout <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">            #后端服务器数据回传时间(代理发送超时)</span><br><span class="line">            #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据</span><br><span class="line">            proxy_send_timeout <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">            #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class="line">            #连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）</span><br><span class="line">            proxy_read_timeout <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">            #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class="line">            #设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小</span><br><span class="line">            proxy_buffer_size <span class="number">4</span>k;</span><br><span class="line"></span><br><span class="line">            #proxy_buffers缓冲区，网页平均在32k以下的设置</span><br><span class="line">            #设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k</span><br><span class="line">            proxy_buffers <span class="number">4</span> <span class="number">32</span>k;</span><br><span class="line"></span><br><span class="line">            #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class="line">            proxy_busy_buffers_size <span class="number">64</span>k;</span><br><span class="line"></span><br><span class="line">            #设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长</span><br><span class="line">            #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class="line">            proxy_temp_file_write_size <span class="number">64</span>k;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">        #设定查看Nginx状态的地址</span><br><span class="line">        location /NginxStatus &#123;</span><br><span class="line">            stub_status on;</span><br><span class="line">            access_log on;</span><br><span class="line">            auth_basic <span class="string">"NginxStatus"</span>;</span><br><span class="line">            auth_basic_user_file confpasswd;</span><br><span class="line">            #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        #本地动静分离反向代理配置</span><br><span class="line">        #所有jsp的页面均交由tomcat或resin处理</span><br><span class="line">        location ~ .(jsp|jspx|<span class="keyword">do</span>)?$ &#123;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_pass http:<span class="comment">//127.0.0.1:8080;</span></span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        #所有静态文件由nginx直接读取不经过tomcat或resin</span><br><span class="line">        location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|</span><br><span class="line">        pdf|xls|mp3|wma)$</span><br><span class="line">        &#123;</span><br><span class="line">            expires <span class="number">15</span>d; </span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        location ~ .*.(js|css)?$</span><br><span class="line">        &#123;</span><br><span class="line">            expires <span class="number">1</span>h;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://blog.csdn.net/hzsunshine/article/details/63687054" target="_blank" rel="noopener">http://blog.csdn.net/hzsunshine/article/details/63687054</a><br><a href="https://www.cnblogs.com/hunttown/p/5759959.html" target="_blank" rel="noopener">https://www.cnblogs.com/hunttown/p/5759959.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/nginx.jpg&quot; alt=&quot;webpack&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="nginx" scheme="http://genghongshuo.com.cn/categories/nginx/"/>
    
    
      <category term="nginx" scheme="http://genghongshuo.com.cn/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>webpack的静态资源集中输出</title>
    <link href="http://genghongshuo.com.cn/2018/02/13/%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E9%9B%86%E4%B8%AD%E8%BE%93%E5%87%BA/"/>
    <id>http://genghongshuo.com.cn/2018/02/13/静态资源集中输出/</id>
    <published>2018-02-13T06:53:56.000Z</published>
    <updated>2018-08-21T08:06:46.428Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="/images/webpack.jpg" alt="webpack"><br><a id="more"></a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在工作中经常会遇到一些在项目中没有引用的图片资源或者其他静态资源，这个就需要用到copy-webpack-plugin插件，直接打包到指定的文件夹下面</p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cnpm install --save-dev copy-webpack-plugin</span><br></pre></td></tr></table></figure><h3 id="引入插件"><a href="#引入插件" class="headerlink" title="引入插件"></a>引入插件</h3><p>在webpack.config.js中头部引入<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> copyWebpackPlugin= <span class="built_in">require</span>(<span class="string">"copy-webpack-plugin"</span>);</span><br></pre></td></tr></table></figure></p><h3 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h3><p>在webpack.config.js的 plugins里面配置就行<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> copyWebpackPlugin([&#123;</span><br><span class="line">        <span class="keyword">from</span>:__dirname+<span class="string">'/src/public'</span>, <span class="comment">// 要打包的静态资源目录地址</span></span><br><span class="line">        to:<span class="string">'./public'</span>   <span class="comment">// 打包到文件下的路径</span></span><br><span class="line">    &#125;])</span><br></pre></td></tr></table></figure></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://jspang.com/2017/09/16/webpack3-2/#20watch" target="_blank" rel="noopener">http://jspang.com/2017/09/16/webpack3-2/#20watch</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/webpack.jpg&quot; alt=&quot;webpack&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="webpack" scheme="http://genghongshuo.com.cn/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://genghongshuo.com.cn/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack执行npm run server报错解决方法</title>
    <link href="http://genghongshuo.com.cn/2018/02/13/webpack_server/"/>
    <id>http://genghongshuo.com.cn/2018/02/13/webpack_server/</id>
    <published>2018-02-13T03:59:56.000Z</published>
    <updated>2018-08-21T08:06:46.427Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="/images/webpack.jpg" alt="webpack"><br><a id="more"></a></p><h3 id="运行命令"><a href="#运行命令" class="headerlink" title="运行命令"></a>运行命令</h3><p>运行npm run server </p><h3 id="出现错误"><a href="#出现错误" class="headerlink" title="出现错误"></a>出现错误</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&gt; webpack-demo@<span class="number">1.0</span><span class="number">.0</span> server F:\webpack-demo</span><br><span class="line">&gt; webpack-dev-server</span><br><span class="line"></span><br><span class="line">events.js:<span class="number">160</span></span><br><span class="line">      <span class="keyword">throw</span> er; <span class="comment">// Unhandled 'error' event</span></span><br><span class="line">      ^</span><br><span class="line"></span><br><span class="line"><span class="built_in">Error</span>: listen EADDRNOTAVAIL <span class="number">172.16</span><span class="number">.0</span><span class="number">.112</span>:<span class="number">1919</span></span><br><span class="line">    at <span class="built_in">Object</span>.exports._errnoException (util.js:<span class="number">1018</span>:<span class="number">11</span>)</span><br><span class="line">    at exports._exceptionWithHostPort (util.js:<span class="number">1041</span>:<span class="number">20</span>)</span><br><span class="line">    at Server._listen2 (net.js:<span class="number">1245</span>:<span class="number">19</span>)</span><br><span class="line">    at listen (net.js:<span class="number">1294</span>:<span class="number">10</span>)</span><br><span class="line">    at net.js:<span class="number">1404</span>:<span class="number">9</span></span><br><span class="line">    at _combinedTickCallback (internal/process/next_tick.js:<span class="number">83</span>:<span class="number">11</span>)</span><br><span class="line">    at process._tickCallback (internal/process/next_tick.js:<span class="number">104</span>:<span class="number">9</span>)</span><br><span class="line">    at Module.runMain (<span class="built_in">module</span>.js:<span class="number">606</span>:<span class="number">11</span>)</span><br><span class="line">    at run (bootstrap_node.js:<span class="number">389</span>:<span class="number">7</span>)</span><br><span class="line">    at startup (bootstrap_node.js:<span class="number">149</span>:<span class="number">9</span>)</span><br><span class="line">    at bootstrap_node.js:<span class="number">504</span>:<span class="number">3</span></span><br><span class="line">npm ERR! code ELIFECYCLE</span><br><span class="line">npm ERR! errno <span class="number">1</span></span><br><span class="line">npm ERR! webpack-demo@<span class="number">1.0</span><span class="number">.0</span> server: <span class="string">`webpack-dev-server`</span></span><br><span class="line">npm ERR! Exit status <span class="number">1</span></span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! Failed at the webpack-demo@<span class="number">1.0</span><span class="number">.0</span> server script.</span><br><span class="line">npm ERR! This is probably not a problem <span class="keyword">with</span> npm. There is likely additional logging output above.</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log <span class="keyword">of</span> <span class="keyword">this</span> run can be found <span class="keyword">in</span>:</span><br><span class="line">npm ERR!     C:\Users\hsgeng\AppData\Roaming\npm-cache\_logs\<span class="number">2018</span><span class="number">-02</span><span class="number">-13</span>T03_41_46_926Z-debug.log</span><br></pre></td></tr></table></figure><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>查看端口是否被占用、ip地址是否正确。<br>被占用的端口可以结束进程或者更换一个端口号<br>ip不正确的修改下ip地址 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/webpack.jpg&quot; alt=&quot;webpack&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="webpack" scheme="http://genghongshuo.com.cn/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://genghongshuo.com.cn/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>mixins混入选项操作</title>
    <link href="http://genghongshuo.com.cn/2018/01/30/mixins%E6%B7%B7%E5%85%A5%E9%80%89%E9%A1%B9%E6%93%8D%E4%BD%9C/"/>
    <id>http://genghongshuo.com.cn/2018/01/30/mixins混入选项操作/</id>
    <published>2018-01-30T12:10:50.000Z</published>
    <updated>2018-08-21T08:06:46.421Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>mixins 选项接受一个混合对象的数组。这些混合实例对象可以像正常的实例对象一样包含选项，他们将在 Vue.extend() 里最终选择使用相同的选项合并逻辑合并。</p><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>Mixins一般有两种用途：</p><p>1、在你已经写好了构造器后，需要增加方法或者临时的活动时使用的方法，这时用混入会减少源代码的污染。<br>2、很多地方都会用到的公用方法，用混入的方法可以减少代码量，实现代码重用。</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>mixins混入选项操作<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>num:&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">P</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 临时添加需求 需要混入</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> addlogin=&#123;</span></span><br><span class="line"><span class="javascript">            updated:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"数据放生变化,变化成"</span>+<span class="keyword">this</span>.num+<span class="string">"."</span>);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 构造器</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app=<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">            data:&#123;</span></span><br><span class="line"><span class="undefined">                num:1</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            methods:&#123;</span></span><br><span class="line"><span class="javascript">                add:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.num++;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="javascript">            updated:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">console</span>.log(<span class="string">'我是原生的undated'</span>);</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="javascript">            mixins:[addlogin] <span class="comment">// 混入   可以混入多个</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 混入先执行、原生的后执行</span></span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="全局API混入方式"><a href="#全局API混入方式" class="headerlink" title="全局API混入方式"></a>全局API混入方式</h3><p>全局混入的执行顺序要前于混入和构造器里的方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.mixin(&#123;</span><br><span class="line">    updated:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'我是全局被混入的'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>混合 (mixins) 是一种分发 Vue 组件中可复用功能的非常灵活的方式。混合对象可以包含任意组件选项。当组件使用混合对象时，所有混合对象的选项将被混入该组件本身的选项。<br>示例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个混合对象</span></span><br><span class="line">  <span class="keyword">var</span> myMixin = &#123;</span><br><span class="line">    created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.hello()</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      hello: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hello from mixin!'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义一个使用混合对象的组件</span></span><br><span class="line">  <span class="keyword">var</span> Component = Vue.extend(&#123;</span><br><span class="line">    mixins: [myMixin]</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> component = <span class="keyword">new</span> Component() <span class="comment">// =&gt; "hello from mixin!"</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;mixins 选项接受一个混合对象的数组
      
    
    </summary>
    
      <category term="vue" scheme="http://genghongshuo.com.cn/categories/vue/"/>
    
    
      <category term="vue" scheme="http://genghongshuo.com.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue-cli脚手架安装及结构介绍</title>
    <link href="http://genghongshuo.com.cn/2018/01/21/vue-cli/"/>
    <id>http://genghongshuo.com.cn/2018/01/21/vue-cli/</id>
    <published>2018-01-21T12:19:56.000Z</published>
    <updated>2018-08-21T08:06:46.425Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="/images/vueCli.png" alt="vue-cli脚手架"><br><a id="more"></a></p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p> Vue-cli是快速构建这个单页应用的脚手架</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h4><p>从这个<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js官方文档</a>中下载安装，安装过程很简单<br>安装完成之后打开命令行工具 输入：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure></p><p>出现相应的版本号说明安装成功<br><img src="/images/nodeJs.png" alt="node.js"></p><h4 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h4><p>npm其实是Node.js的包管理工具（package manager）</p><p>因为我们在Node.js上开发时，会用到很多别人写的JavaScript代码。如果我们要使用别人写的某个包，每次都根据名称搜索一下官方网站，下载代码，解压，再使用，非常繁琐。于是一个集中管理的工具应运而生：大家都把自己开发的模块打包后放到npm官网上，如果要使用，直接通过npm安装就可以直接用，不用管代码存在哪，应该从哪下载</p><p>输入命令<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm --registry= https:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure></p><p>出现相应的版本号说明安装成功<br><img src="/images/npm.png" alt="npm"></p><h3 id="webpack安装"><a href="#webpack安装" class="headerlink" title="webpack安装"></a>webpack安装</h3><p>全局安装<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack -g</span><br></pre></td></tr></table></figure></p><h3 id="vue-cli脚手架"><a href="#vue-cli脚手架" class="headerlink" title="vue-cli脚手架"></a>vue-cli脚手架</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-cli -g</span><br></pre></td></tr></table></figure><h3 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vue init <span class="tag">&lt;<span class="name">template-name</span>&gt;</span> <span class="tag">&lt;<span class="name">project-name</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><p> 用vue-cli脚手架新建一个项目<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ vue init webpack vuecli ----- 这个是那个安装vue脚手架的命令</span><br><span class="line">? Project name (vuecli)  ----- 项目名称</span><br><span class="line">? Project name vuecli</span><br><span class="line">? Project description (A Vue.js project) -----------项目描述</span><br><span class="line">? Project description A Vue.js project</span><br><span class="line">? Author (hsgeng &lt;<span class="number">648715552</span>@qq.com&gt;) hsgeng</span><br><span class="line">? Author hsgeng   --------- 项目创建者</span><br><span class="line">? Vue build (Use arrow keys)</span><br><span class="line">? Vue build standalone</span><br><span class="line">? Install vue-router? (Y/n) -------- 是否安装路由</span><br><span class="line">? Install vue-router? Yes</span><br><span class="line">? Use ESLint to lint your code? (Y/n) n ------是否启用eslint检测规则</span><br><span class="line">? Use ESLint to lint your code? No</span><br><span class="line">? Setup unit tests <span class="keyword">with</span> Karma + Mocha? (Y/n)  ------是否安装单元测试</span><br><span class="line">? Setup unit tests <span class="keyword">with</span> Karma + Mocha? n</span><br><span class="line">? Setup e2e tests <span class="keyword">with</span> Nightwatch? (Y/n) ---------是否安装模拟测试</span><br><span class="line">? Setup e2e tests <span class="keyword">with</span> Nightwatch? n</span><br><span class="line">vue-cli · Generated <span class="string">"vuecli"</span>.</span><br><span class="line">To get started:  </span><br><span class="line">cd vuecli  </span><br><span class="line">npm install </span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure></p><h4 id="找到项目目录"><a href="#找到项目目录" class="headerlink" title="找到项目目录"></a>找到项目目录</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd  vuecli</span><br></pre></td></tr></table></figure><h4 id="安装项目依赖"><a href="#安装项目依赖" class="headerlink" title="安装项目依赖"></a>安装项目依赖</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">|-- build                            <span class="comment">// 项目构建(webpack)相关代码</span></span><br><span class="line">|   |-- build.js                     <span class="comment">// 生产环境构建代码</span></span><br><span class="line">|   |-- check-version.js             <span class="comment">// 检查node、npm等版本</span></span><br><span class="line">|   |-- dev-client.js                <span class="comment">// 热重载相关</span></span><br><span class="line">|   |-- dev-server.js                <span class="comment">// 构建本地服务器</span></span><br><span class="line">|   |-- utils.js                     <span class="comment">// 构建工具相关</span></span><br><span class="line">|   |-- webpack.base.conf.js         <span class="comment">// webpack基础配置</span></span><br><span class="line">|   |-- webpack.dev.conf.js          <span class="comment">// webpack开发环境配置</span></span><br><span class="line">|   |-- webpack.prod.conf.js         <span class="comment">// webpack生产环境配置</span></span><br><span class="line">|-- config                           <span class="comment">// 项目开发环境配置</span></span><br><span class="line">|   |-- dev.env.js                   <span class="comment">// 开发环境变量</span></span><br><span class="line">|   |-- index.js                     <span class="comment">// 项目一些配置变量</span></span><br><span class="line">|   |-- prod.env.js                  <span class="comment">// 生产环境变量</span></span><br><span class="line">|   |-- test.env.js                  <span class="comment">// 测试环境变量</span></span><br><span class="line">|-- src                              <span class="comment">// 源码目录</span></span><br><span class="line">|   |-- components                     <span class="comment">// vue公共组件</span></span><br><span class="line">|   |-- store                          <span class="comment">// vuex的状态管理</span></span><br><span class="line">|   |-- App.vue                        <span class="comment">// 页面入口文件</span></span><br><span class="line">|   |-- main.js                        <span class="comment">// 程序入口文件，加载各种公共组件</span></span><br><span class="line">|-- <span class="keyword">static</span>                           <span class="comment">// 静态文件，比如一些图片，json数据等</span></span><br><span class="line">|   |-- data                           <span class="comment">// 群聊分析得到的数据用于数据可视化</span></span><br><span class="line">|-- .babelrc                         <span class="comment">// ES6语法编译配置</span></span><br><span class="line">|-- .editorconfig                    <span class="comment">// 定义代码格式</span></span><br><span class="line">|-- .gitignore                       <span class="comment">// git上传需要忽略的文件格式</span></span><br><span class="line">|-- README.md                        <span class="comment">// 项目说明</span></span><br><span class="line">|-- favicon.ico </span><br><span class="line">|-- index.html                       <span class="comment">// 入口页面</span></span><br><span class="line">|-- package.json                     <span class="comment">// 项目基本信息</span></span><br></pre></td></tr></table></figure><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://jspang.com/2017/04/10/vue-cli/" target="_blank" rel="noopener">http://jspang.com/2017/04/10/vue-cli/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/vueCli.png&quot; alt=&quot;vue-cli脚手架&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="vue" scheme="http://genghongshuo.com.cn/categories/vue/"/>
    
    
      <category term="Vue-cli" scheme="http://genghongshuo.com.cn/tags/Vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>GIT常用命令总结</title>
    <link href="http://genghongshuo.com.cn/2018/01/17/git-2/"/>
    <id>http://genghongshuo.com.cn/2018/01/17/git-2/</id>
    <published>2018-01-17T14:10:50.000Z</published>
    <updated>2018-08-21T08:06:46.415Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="git基本命令"><a href="#git基本命令" class="headerlink" title="git基本命令"></a>git基本命令</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">git add 将想要快照的内容写入缓存区</span><br><span class="line">git status -s <span class="string">"AM"</span> 状态的意思是，这个文件在我们将它添加到缓存之后又有改动</span><br><span class="line">git commit -m <span class="string">'第一次版本提交'</span> -m选项添加备注信息</span><br><span class="line">git clone url 使用 git clone 拷贝一个 Git 仓库到本地</span><br><span class="line">git diff 查看执行 git status 的结果的详细信息</span><br><span class="line">　　尚未缓存的改动：git diff</span><br><span class="line">　　查看已缓存的改动： git diff --cached</span><br><span class="line">　　查看已缓存的与未缓存的所有改动：git diff HEAD</span><br><span class="line">　　显示摘要而非整个 diff：git diff --stat</span><br><span class="line">git commit -a 跳过git add 提交缓存的流程 </span><br><span class="line">git reset HEAD 用于取消已缓存的内容</span><br><span class="line">git rm file </span><br><span class="line">　　git rm 会将条目从缓存区中移除。这与 git reset HEAD 将条目取消缓存是有区别的。</span><br><span class="line">　　<span class="string">"取消缓存"</span>的意思就是将缓存区恢复为我们做出修改之前的样子。</span><br><span class="line">　　默认情况下，git rm file 会将文件从缓存区和你的硬盘中（工作目录）删除。</span><br><span class="line">git mv 重命名磁盘上的文件 如 git mv README README.md</span><br><span class="line"></span><br><span class="line">git push -u origin master 提交代码</span><br></pre></td></tr></table></figure><h3 id="git-分支管理"><a href="#git-分支管理" class="headerlink" title="git 分支管理"></a>git 分支管理</h3><p>创建分支命令 git branch (branchname) 列出分支 git branch<br>切换分支命令 git checkout (branchname)<br>合并分支 git merge (branchname)<br>创建新分支并立即切换到该分支下 git checkout -b (branchname)<br>删除分支命令 git branch -d (branchname)<br>ps:状态 uu 表示冲突未解决 可以用 git add 要告诉 Git 文件冲突已经解决</p><h3 id="更改提交的操作"><a href="#更改提交的操作" class="headerlink" title="更改提交的操作"></a>更改提交的操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">　　git reset //回溯历史版本</span><br><span class="line">　　git reset --hrad //回溯到指定状态，只要提供目标时间点的哈希值</span><br></pre></td></tr></table></figure><h3 id="修改提交信息-git-commit-–amend"><a href="#修改提交信息-git-commit-–amend" class="headerlink" title="修改提交信息 git commit –amend"></a>修改提交信息 git commit –amend</h3><p>　　压缩历史 git rebase -i 错字漏字等失误称作typo<br>　　根据以前的步骤在GitHub上创建仓库，应于本地的仓库名相同 GitHub上面创建的仓库的路径为git@github.com: 用户名/仓库名.git<br>　　git remote add eee git@github.com: 用户名/仓库名.git //添加远程仓库，并将git@github.com: 用户名/仓库名.git远程仓库的名称改为eee<br>　　git push -u eee master //推送至远程仓库 master分支下 -u 参数可以在推送的同时，将eee仓库的master分支设置为本地仓库的当前分<br>　　支的的upstream（上游）。添加这个参数，将来运行git pull命令从远程仓库获取内容时，本地仓库的这个分支就可以直接从eee的master<br>分支中获取内容<br>　　git checkout -b feature d eee/feature d //获取远程的feature d分支到本地仓库，-b参数后面是本地仓库中新建的仓库的名称<br>　　git pull eee feature d //将本地的feature d分支更新为最新状态<br>　　在GitHub上面查看两个分支之间的差别，只需要在地址栏中输入<a href="http://github.com/用户名/仓库名/分支1...分支2" target="_blank" rel="noopener">http://github.com/用户名/仓库名/分支1...分支2</a></p><h3 id="查看日志版本"><a href="#查看日志版本" class="headerlink" title="查看日志版本"></a>查看日志版本</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git log 命令列出历史提交记录</span><br><span class="line">git log --oneline 查看历史记录的简洁的版本</span><br><span class="line">git log --oneline --graph 查看历史中什么时候出现了分支、合并</span><br></pre></td></tr></table></figure><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>为软件发布创建标签是推荐的。这个概念早已存在，在 SVN 中也有。你可以执行如下命令创建一个叫做 1.0.0 的标签：<br>git tag 1.0.0 1b2e1d63ff<br>1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符。可以使用下列命令获取提交 ID：<br>git log<br>你也可以使用少一点的提交 ID 前几位，只要它的指向具有唯一性</p><h3 id="提取远程仓库代码"><a href="#提取远程仓库代码" class="headerlink" title="提取远程仓库代码"></a>提取远程仓库代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch　　从远程仓库下载新分支与数据</span><br><span class="line">git pull　　从远端仓库提取数据并尝试合并到当前分支</span><br></pre></td></tr></table></figure><p>###<br>参考 <a href="https://www.cnblogs.com/hexiaobao/p/8134829.html" target="_blank" rel="noopener">https://www.cnblogs.com/hexiaobao/p/8134829.html</a><br><a href="https://www.cnblogs.com/lhxiaosoft/p/6400812.html" target="_blank" rel="noopener">https://www.cnblogs.com/lhxiaosoft/p/6400812.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;git基本命令&quot;&gt;&lt;a href=&quot;#git基本命令&quot; class=&quot;headerlink&quot; title=&quot;git基本命令&quot;&gt;&lt;/a&gt;git基本命令&lt;/h3&gt;&lt;fi
      
    
    </summary>
    
      <category term="GIT" scheme="http://genghongshuo.com.cn/categories/GIT/"/>
    
    
      <category term="GIT" scheme="http://genghongshuo.com.cn/tags/GIT/"/>
    
  </entry>
  
  <entry>
    <title>一台电脑上使用多个git账号</title>
    <link href="http://genghongshuo.com.cn/2018/01/17/git-1/"/>
    <id>http://genghongshuo.com.cn/2018/01/17/git-1/</id>
    <published>2018-01-17T12:10:50.000Z</published>
    <updated>2018-08-21T08:06:46.414Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="/images/git.jpg" alt="git操作总结"><br><a id="more"></a><br>这里以work和github两个账户为例：</p><h3 id="取消全局变量"><a href="#取消全局变量" class="headerlink" title="取消全局变量"></a>取消全局变量</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset user.name  #取消全局设置</span><br><span class="line">git config --global --unset user.email #取消全局设置</span><br><span class="line">git config -l #查看当前目录的git config</span><br></pre></td></tr></table></figure><p>再分别去不同的项目目录中，设置这个目录中项目对应的账号<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name <span class="string">"newname"</span></span><br><span class="line">git config user.email <span class="string">"newemail"</span></span><br></pre></td></tr></table></figure></p><h3 id="生成两个秘钥"><a href="#生成两个秘钥" class="headerlink" title="生成两个秘钥"></a>生成两个秘钥</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"work@github.com"</span></span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">"github@github.com"</span></span><br></pre></td></tr></table></figure><p>在C:\Users\hsgeng.ssh文件下会生成四个文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">id_rsa_work</span><br><span class="line">id_rsa_work.pub</span><br><span class="line">id_rsa_git</span><br><span class="line">id_rsa_git.pub</span><br></pre></td></tr></table></figure></p><p><img src="/images/git_ssh.png" alt="git中ssh生成秘钥"></p><h3 id="设置ssh-config"><a href="#设置ssh-config" class="headerlink" title="设置ssh config"></a>设置ssh config</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Host work  </span><br><span class="line">    HostName git.mobicloud.com.cn</span><br><span class="line">    IdentityFile /c/Users/hsgeng/.ssh/id_rsa_work</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    User work</span><br><span class="line"></span><br><span class="line">Host git </span><br><span class="line">    HostName github.com</span><br><span class="line">    IdentityFile /c/Users/hsgeng/.ssh/id_rsa_git</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    User git</span><br></pre></td></tr></table></figure><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>分别把秘钥添加到对应的账号上面就行了</p><p>如果另外一台电脑上面也需要用这个这个账号、只需要把生成的ssh下的文件复制到另一台电脑就行。</p><p>如果有那个地方写错，请大家指出来，感谢大家！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/git.jpg&quot; alt=&quot;git操作总结&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="GIT" scheme="http://genghongshuo.com.cn/categories/GIT/"/>
    
    
      <category term="GIT" scheme="http://genghongshuo.com.cn/tags/GIT/"/>
    
  </entry>
  
  <entry>
    <title>GIT安装配置</title>
    <link href="http://genghongshuo.com.cn/2018/01/16/git/"/>
    <id>http://genghongshuo.com.cn/2018/01/16/git/</id>
    <published>2018-01-16T12:10:50.000Z</published>
    <updated>2018-08-21T08:06:46.416Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="/images/git.jpg" alt="git操作总结"><br><a id="more"></a></p><h3 id="git是什么"><a href="#git是什么" class="headerlink" title="git是什么"></a>git是什么</h3><p>Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。  Git的读音为/gɪt/。<br>Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。  Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Windows上使用Git，可以从<a href="https://git-scm.com/" target="_blank" rel="noopener">git官网下载</a>安装程序</p><p>如果下载成功之后默认安装即可，然后再在菜单中找到Git –&gt; Git Bash 打开出现下图命令的窗口说明已经安装成功。</p><p><img src="/images/gitaz.png" alt="git安装成功显示"></p><h3 id="git配置和使用"><a href="#git配置和使用" class="headerlink" title="git配置和使用"></a>git配置和使用</h3><h4 id="设置Git个人信息"><a href="#设置Git个人信息" class="headerlink" title="设置Git个人信息"></a>设置Git个人信息</h4><pre><code class="js">$ git config --global user.name <span class="string">"hsgeng"</span>  名字$ git config --global user.email <span class="string">"648715552@qq.com"</span>  邮箱</code></pre><h4 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h4><pre><code class="js">$ ssh-keygen -t rsa -C <span class="string">"humingx@yeah.net"</span></code></pre><p>生成之后在C:\Users\hsgeng.ssh  下生成id_rsa和id_rsa.pub两个文件</p><h4 id="添加秘钥"><a href="#添加秘钥" class="headerlink" title="添加秘钥"></a>添加秘钥</h4><p>这里以github为例<br>打开id_rsa.pub文把秘钥填写到github上<a href="https://github.com/settings/keys" target="_blank" rel="noopener">这里</a></p><h4 id="测试是否正常"><a href="#测试是否正常" class="headerlink" title="测试是否正常"></a>测试是否正常</h4><p>ssh -T git@github.com<br>会显示</p><pre><code class="js">The authenticity <span class="keyword">of</span> host <span class="string">'github.com (207.97.227.239)'</span> can<span class="string">'t be established. RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48. Are you sure you want to continue connecting (yes/no)?</span><span class="string">输入yes后，显示出下列信息表示连接成功</span><span class="string">Hi username! You'</span>ve successfully authenticated, but GitHub does not provide shell access.</code></pre><h3 id="创建代码库"><a href="#创建代码库" class="headerlink" title="创建代码库"></a>创建代码库</h3><h4 id="创建本地代码库"><a href="#创建本地代码库" class="headerlink" title="创建本地代码库"></a>创建本地代码库</h4><pre><code class="js">mkdir ~<span class="regexp">/github  创建目录</span><span class="regexp">cd /gi</span>thub 更换到当前目录下git init 初始化改文件</code></pre><h4 id="克隆代码"><a href="#克隆代码" class="headerlink" title="克隆代码"></a>克隆代码</h4><pre><code class="js">git clone https:<span class="comment">// 克隆github项目的地址</span></code></pre><p>克隆指定分支</p><pre><code class="js">git clone -b blog（分支名称） https:<span class="comment">//克隆github项目的地址</span></code></pre><h3 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h3><p>每次提交之前都需要push下  更新下代码</p><pre><code class="js">git pull  <span class="comment">// 更新</span>git add .  <span class="comment">//添加</span>git commit -a<span class="string">"更改内容"</span>  <span class="comment">//commit 标记</span>git push origin master  <span class="comment">// master分支名称</span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/git.jpg&quot; alt=&quot;git操作总结&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="GIT" scheme="http://genghongshuo.com.cn/categories/GIT/"/>
    
    
      <category term="GIT" scheme="http://genghongshuo.com.cn/tags/GIT/"/>
    
  </entry>
  
  <entry>
    <title>浅谈web前端安全机制问题(转)</title>
    <link href="http://genghongshuo.com.cn/2018/01/04/WEB%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/"/>
    <id>http://genghongshuo.com.cn/2018/01/04/WEB前端安全机制/</id>
    <published>2018-01-04T07:19:56.000Z</published>
    <updated>2018-08-21T08:06:46.412Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>“安全”是个很大的话题，各种安全问题的类型也是种类繁多。如果我们把安全问题按照所发生的区域来进行分类的话，那么所有发生在后端服务器、应用、服务当中的安全问题就是“后端安全问题”，所有发生在浏览器、单页面应用、Web页面当中的安全问题则算是“前端安全问题”。</p><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p>XSS是<a href="https://nodejs.org/en/" target="_blank" rel="noopener">跨站脚本攻击（Cross-Site Scripting）</a>的简称<br>XSS分为：存储型和反射型</p><h4 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h4><p>存储型XSS：存储型XSS，持久化，代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，用户访问该页面的时候触发代码执行。这种XSS比较危险，容易造成蠕虫，盗窃cookie（虽然还有种DOM型XSS，但是也还是包括在存储型XSS内）。</p><h4 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h4><p>反射型XSS：非持久化，需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。</p><h4 id="如何防御"><a href="#如何防御" class="headerlink" title="如何防御"></a>如何防御</h4><p>防御XSS最佳的做法就是对数据进行严格的输出编码，使得攻击者提供的数据不再被浏览器认为是脚本而被误执行。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如&lt;script&gt;在进行HTML编码后变成了&amp;lt;script&amp;gt;</span><br></pre></td></tr></table></figure></p><p>而这段数据就会被浏览器认为只是一段普通的字符串，而不会被当做脚本执行了。<br>你可以查阅<a href="https://nodejs.org/en/" target="_blank" rel="noopener">OWASP XSS Prevention Cheat Sheet</a>，里面有关于XSS及其防御措施的详细说明。</p><h3 id="iframe带来的风险"><a href="#iframe带来的风险" class="headerlink" title="iframe带来的风险"></a>iframe带来的风险</h3><h4 id="风险"><a href="#风险" class="headerlink" title="风险"></a>风险</h4><p>有些时候我们的前端页面需要用到第三方提供的页面组件，通常会以iframe的方式引入。典型的例子是使用iframe在页面上添加第三方提供的广告、天气预报、社交分享插件等等。</p><p>iframe在给我们的页面带来更多丰富的内容和能力的同时，也带来了不少的安全隐患。因为iframe中的内容是由第三方来提供的，默认情况下他们不受我们的控制，他们可以在iframe中运行JavaScirpt脚本、Flash插件、弹出对话框等等，这可能会破坏前端用户体验。<br>如果说iframe只是有可能会给用户体验带来影响，看似风险不大，那么如果iframe中的域名因为过期而被恶意攻击者抢注，或者第三方被黑客攻破，iframe中的内容被替换掉了，从而利用用户浏览器中的安全漏洞下载安装木马、恶意勒索软件等等，这问题可就大了。</p><h4 id="如何防御-1"><a href="#如何防御-1" class="headerlink" title="如何防御"></a>如何防御</h4><p>还好在HTML5中，iframe有了一个叫做sandbox的安全属性，通过它可以对iframe的行为进行各种限制，充分实现“最小权限“原则。使用sandbox的最简单的方式就是只在iframe元素中添加上这个关键词就好，就像下面这样：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe sandbox src=<span class="string">"..."</span>&gt; ... &lt;<span class="regexp">/iframe&gt;</span></span><br></pre></td></tr></table></figure></p><p>sandbox还忠实的实现了“Secure By Default”原则，也就是说，如果你只是添加上这个属性而保持属性值为空，那么浏览器将会对iframe实施史上最严厉的调控限制，基本上来讲就是除了允许显示静态资源以外，其他什么都做不了。比如不准提交表单、不准弹窗、不准执行脚本等等，连Origin都会被强制重新分配一个唯一的值，换句话讲就是iframe中的页面访问它自己的服务器都会被算作跨域请求。</p><p>另外，sandbox也提供了丰富的配置参数，我们可以进行较为细粒度的控制。一些典型的参数如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">allow-forms：允许iframe中提交form表单</span><br><span class="line">allow-popups：允许iframe中弹出新的窗口或者标签页（例如，<span class="built_in">window</span>.open()，showModalDialog()，target=”_blank”等等）</span><br><span class="line">allow-scripts：允许iframe中执行JavaScript</span><br><span class="line">allow-same-origin：允许iframe中的网页开启同源策略</span><br></pre></td></tr></table></figure></p><p>更多详细的资料，可以参考<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe" target="_blank" rel="noopener">iframe中关于sandbox的介绍</a></p><h3 id="请求劫持与HTTPS"><a href="#请求劫持与HTTPS" class="headerlink" title="请求劫持与HTTPS"></a>请求劫持与HTTPS</h3><h4 id="请求劫持"><a href="#请求劫持" class="headerlink" title="请求劫持"></a>请求劫持</h4><h5 id="DNS劫持"><a href="#DNS劫持" class="headerlink" title="DNS劫持"></a>DNS劫持</h5><p>DNS劫持就是通过劫持了DNS服务器，通过某些手段取得某域名的解析记录控制权，进而修改此域名的解析结果，导致对该域名的访问由原IP地址转入到修改后的指定IP，其结果就是对特定的网址不能访问或访问的是假网址，从而实现窃取资料或者破坏原有正常服务的目的。DNS劫持通过篡改DNS服务器上的数据返回给用户一个错误的查询结果来实现的。   DNS劫持症状：在某些地区的用户在成功连接宽带后，首次打开任何页面都指向ISP提供的“电信互联星空”、“网通黄页广告”等内容页面。还有就是曾经出现过用户访问Google域名的时候出现了百度的网站。这些都属于DNS劫持。 再说简单点，当你输入google.com这个网址的时候，你看到的网站却是百度的首页。</p><h5 id="http劫持："><a href="#http劫持：" class="headerlink" title="http劫持："></a>http劫持：</h5><p>在用户的客户端与其要访问的服务器经过网络协议协调后，二者之间建立了一条专用的数据通道，用户端程序在系统中开放指定网络端口用于接收数据报文，服务器端将全部数据按指定网络协议规则进行分解打包，形成连续数据报文。   用户端接收到全部报文后，按照协议标准来解包组合获得完整的网络数据。其中传输过程中的每一个数据包都有特定的标签，表示其来源、携带的数据属性以及要到何处，所有的数据包经过网络路径中ISP的路由器传输接力后，最终到达目的地，也就是客户端。   HTTP劫持是在使用者与其目的网络服务所建立的专用数据通道中，监视特定数据信息，提示当满足设定的条件时，就会在正常的数据流中插入精心设计的网络数据报文，目的是让用户端程序解释“错误”的数据，并以弹出新窗口的形式在使用者界面展示宣传性广告或者直接显示某网站的内容。列入本地的fiddler为一种劫持</p><p>请求劫持唯一可行的预防方法就是尽量使用HTTPS协议访问。</p><h4 id="公钥和私钥"><a href="#公钥和私钥" class="headerlink" title="公钥和私钥"></a>公钥和私钥</h4><p>什么是https，这里不再解释了，简单理解就是通过SSL（Secure Sockets Layer）层来加密http数据来进行安全传输。 那使用HTTPS是怎样进行安全数据传输的？</p><p>先看个有意思的问题：</p><p>  A、B两个人分别在两个岛上，并且分别有一个箱子，一把锁，和打开这把锁的钥匙（A的钥匙打不开B手上的锁，B的钥匙也打不开A的锁）。此时A要跟B互通情报，此时需要借助C的船运输，C是一个不可靠的人，如果A直接把情报送给B或把情报放在箱子里给B，都可能会被C偷走；如果A把情报锁在箱子里，B没有打开A锁的钥匙无法获得情报内容。请问有什么办法可以尽可能快的让A和B互通情报。</p><p>  这就是公钥和私钥的问题了，答案比较简单，也对应了公钥和私钥在https中的应用过程。</p><p>  公钥（Public Key）与私钥（Private Key）是通过一种算法得到的一个密钥对（即一个公钥和一个私钥），公钥是密钥对中公开的部分，私钥则是非公开的部分。公钥通常用于加密会话密钥、验证数字签名，或加密可以用相应的私钥解密的数据。通过这种算法得到的密钥对能保证在世界范围内是唯一的。使用这个密钥对的时候，如果用其中一个密钥加密一段数据，必须用另一个密钥解密。比如用公钥加密数据就必须用私钥解密，如果用私钥加密也必须用公钥解密，否则解密将不会成功。</p><h4 id="Https的通信过程"><a href="#Https的通信过程" class="headerlink" title="Https的通信过程"></a>Https的通信过程</h4><p>1、客户端发送https请求，告诉服务器发将建立https连接<br>2、服务器将服务端生成的公钥返回给客户端，如果是第一次请求将告诉客户端需要验证链接<br>3、客户端接收到请求后’client finished’报文串通过获取到的服务器公钥加密发送给服务器，并将客户端生成的公钥也发送给服务器<br>4、服务器获取到加密的报文和客户端公钥，先使用服务器私钥解密报文，然后将报文通过客户端的公钥加密返回给客户端。<br>5、客户端通过私钥解密报文，判断是否为自己开始发送的报文串；如果正确，说明安全连接验证成功，将数据通过服务器公钥加密不断发送给服务器，服务器也不断解密获取报文，并通过客户端公钥加密返回给客户端验证。这样就建立了不断通信的连接。</p><h4 id="Https协议头解析"><a href="#Https协议头解析" class="headerlink" title="Https协议头解析"></a>Https协议头解析</h4><p>以打开 <a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a> 的过程为例，请求通用头部如下</p><p>Request URL:<a href="https://github.com/ouvens\n" target="_blank" rel="noopener">https://github.com/ouvens\n</a><br>Request Method:GET<br>Status Code:200 OK (from cache)<br>Remote Address:192.30.252.131:443<br>Response Headers</p><h3 id="其它浏览器web安全控制"><a href="#其它浏览器web安全控制" class="headerlink" title="其它浏览器web安全控制"></a>其它浏览器web安全控制</h3><h4 id="X-XSS-Protection"><a href="#X-XSS-Protection" class="headerlink" title="X-XSS-Protection"></a>X-XSS-Protection</h4><p>这个header主要是用来防止浏览器中的反射性xss。现在，只有IE，chrome和safari（webkit）支持这个header。</p><p>正确的设置:</p><p>X-XSS-Protection:1; mode=block<br>0 – 关闭对浏览器的xss防护<br>1 – 开启xss防护<br>1; mode=block – 开启xss防护并通知浏览器阻止而不是过滤用户注入的脚本。<br>1; report=<a href="http://site.com/report" target="_blank" rel="noopener">http://site.com/report</a> – 这个只有chrome和webkit内核的浏览器支持，这种模式告诉浏览器当发现疑似xss攻击的时候就将这部分数据post到指定地址。 通常不正确的设置</p><h4 id="X-Content-Type-Options"><a href="#X-Content-Type-Options" class="headerlink" title="X-Content-Type-Options"></a>X-Content-Type-Options</h4><p>&ems; 这个header主要用来防止在IE9、chrome和safari中的MIME类型混淆攻击。firefox目前对此还存在争议。通常浏览器可以通过嗅探内容本身的方法来决定它是什么类型，而不是看响应中的content-type值。通过设置 X-Content-Type-Options：如果content-type和期望的类型匹配，则不需要嗅探，只能从外部加载确定类型的资源。举个例子，如果加载了一个样式表，那么资源的MIME类型只能是text/css，对于IE中的脚本资源，以下的内容类型是有效的：</p><p>application/ecmascript<br>application/javascript<br>application/x-javascript<br>text/ecmascript<br>text/javascript<br>text/jscript<br>text/x-javascript<br>text/vbs<br>text/vbscript<br>对于chrome，则支持下面的MIME 类型：</p><p>text/javascript<br>text/ecmascript<br>application/javascript<br>application/ecmascript<br>application/x-javascript<br>text/javascript1.1<br>text/javascript1.2<br>text/javascript1.3<br>text/jscript<br>text/live script<br>nosniff – 这个是唯一正确的设置，必须这样。</p><h4 id="Strict-Transport-Security"><a href="#Strict-Transport-Security" class="headerlink" title="Strict-Transport-Security"></a>Strict-Transport-Security</h4><p>Strict Transport Security (STS) 是用来配置浏览器和服务器之间安全的通信。它主要是用来防止中间人攻击，因为它强制所有的通信都走TLS。目前IE还不支持 STS头。需要注意的是，在普通的http请求中配置STS是没有作用的，因为攻击者很容易就能更改这些值。为了防止这样的现象发生，很多浏览器内置了一个配置了STS的站点list。</p><p>正确的设置 : 注意下面的值必须在https中才有效，如果是在http中配置会没有效果。</p><p>max-age=31536000 – 告诉浏览器将域名缓存到STS list里面，时间是一年。<br>max-age=31536000; includeSubDomains – 告诉浏览器将域名缓存到STS list里面并且包含所有的子域名，时间是一年。<br>max-age=0 – 告诉浏览器移除在STS缓存里的域名，或者不保存此域名。<br>通常不正确的设置<br>判断一个主机是否在你的STS缓存中，chrome可以通过访问chrome://net-internals/#hsts，首先，通过域名请求选项来确认此域名是否在你的STS缓存中。然后，通过https访问这个网站，尝试再次请求返回的STS头，来决定是否添加正确。</p><h3 id="Content-Security-Policy"><a href="#Content-Security-Policy" class="headerlink" title=".Content-Security-Policy"></a>.Content-Security-Policy</h3><p>CSP是一种由开发者定义的安全性政策性申明，通过CSP所约束的的规责指定可信的内容来源（这里的内容可以指脚本、图片、iframe、fton、style等等可能的远程的资源）。通过CSP协定，让WEB能够加载指定安全域名下的资源文件，保证运行时处于一个安全的运行环境中。</p><p>正确配置：</p><p>Content-Security-Policy:default-src <em>; base-uri ‘self’; block-all-mixed-content; child-src ‘self’ render.githubusercontent.com; connect-src ‘self’ uploads.github.com status.github.com api.github.com www.google-analytics.com github-cloud.s3.amazonaws.com wss://live.github.com; font-src assets-cdn.github.com; form-action ‘self’ github.com gist.github.com; frame-src ‘self’ render.githubusercontent.com; img-src ‘self’ data: assets-cdn.github.com identicons.github.com www.google-analytics.com collector.githubapp.com </em>.gravatar.com <em>.wp.com </em>.githubusercontent.com; media-src ‘none’; object-src assets-cdn.github.com; plugin-types application/x-shockwave-flash; script-src assets-cdn.github.com; style-src ‘self’ ‘unsafe-inline’ assets-cdn.github.com</p><h4 id="X-Frame-Options"><a href="#X-Frame-Options" class="headerlink" title="X-Frame-Options"></a>X-Frame-Options</h4><p>这个header主要用来配置哪些网站可以通过frame来加载资源。它主要是用来防止UI redressing 补偿样式攻击。IE8和firefox 18以后的版本都开始支持ALLOW-FROM。chrome和safari都不支持ALLOW-FROM，但是WebKit已经在研究这个了。</p><p>正确的设置</p><p>X-Frame-Options: deny<br>deny – 禁止所有的资源（本地或远程）试图通过frame来加载其他也支持X-Frame-Options 的资源。<br>sameorigion – 只允许遵守同源策略的资源（和站点同源）通过frame加载那些受保护的资源。<br>allow-from <a href="http://www.example.com" target="_blank" rel="noopener">http://www.example.com</a> – 允许指定的资源（必须带上协议http或者https）通过frame来加载受保护的资源。这个配置只在IE和firefox下面有效。其他浏览器则默认允许任何源的资源（在X-Frame-Options没设置的情况下）。 </p><h4 id="Access-Control-Allow-Origin"><a href="#Access-Control-Allow-Origin" class="headerlink" title="Access-Control-Allow-Origin"></a>Access-Control-Allow-Origin</h4><p>Access-Control-Allow-Origin是从Cross Origin Resource Sharing (CORS)中分离出来的。这个header是决定哪些网站可以访问资源，通过定义一个通配符来决定是单一的网站还是所有网站可以访问我们的资源。需要注意的是，如果定义了通配符，那么 Access-Control-Allow-Credentials选项就无效了，而且user-agent的cookies不会在请求里发送。</p><p>正确的设置</p><p>Access-Control-Allow-Origin : <em></em>– 通配符允许任何远程资源来访问含有Access-Control-Allow-Origin 的内容。<br><a href="http://www.example.com" target="_blank" rel="noopener">http://www.example.com</a> – 只允许特定站点才能访问(<a href="http://[host" target="_blank" rel="noopener">http://[host</a>], 或者 <a href="https://[host" target="_blank" rel="noopener">https://[host</a>])</p><h4 id="Public-Key-Pins"><a href="#Public-Key-Pins" class="headerlink" title="Public-Key-Pins"></a>Public-Key-Pins</h4><p>公钥固定（Public Key Pinning）是指一个证书链中必须包含一个白名单中的公钥，也就是说只有被列入白名单的证书签发机构（CA）才能为某个域名*.example.com签发证书，而不是你的浏览器中所存储的任何 CA 都可以为之签发。可以理解为https的证书域名白名单。   Public-Key-Pins (PKP)的目的主要是允许网站经营者提供一个哈希过的公共密钥存储在用户的浏览器缓存里。跟Strict-Transport-Security功能相似的是，它能保护用户免遭中间人攻击。这个header可能包含多层的哈希运算，比如pin-sha256=base64(sha256(SPKI))，具体是先将 X.509 证书下的Subject Public Key Info (SPKI) 做sha256哈希运算，然后再做base64编码。然而，这些规定有可能更改，例如有人指出，在引号中封装哈希是无效的，而且在33版本的chrome中也不会保存pkp的哈希到缓存中。</p><p>  这个header和 STS的作用很像，因为它规定了最大子域名的数量。此外，pkp还提供了一个Public-Key-Pins-Report-Only 头用来报告异常，但是不会强制阻塞证书信息。当然，这些chrome都是不支持的。</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://raymii.org/s/articles/HTTP_Public_Key_Pinning_Extension_HPKP.html" target="_blank" rel="noopener">https://raymii.org/s/articles/HTTP_Public_Key_Pinning_Extension_HPKP.html</a><br><a href="https://www.veracode.com/blog/2014/03/guidelines-for-setting-security-headers/" target="_blank" rel="noopener">https://www.veracode.com/blog/2014/03/guidelines-for-setting-security-headers/</a><br>原文链接 <a href="http://jixianqianduan.com/frontend-weboptimize/2016/03/20/web-security-and-https.html" target="_blank" rel="noopener">http://jixianqianduan.com/frontend-weboptimize/2016/03/20/web-security-and-https.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;“安全”是个很大的话题，各种安全问题的类
      
    
    </summary>
    
      <category term="前端" scheme="http://genghongshuo.com.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="web安全机制" scheme="http://genghongshuo.com.cn/tags/web%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>2017年总结</title>
    <link href="http://genghongshuo.com.cn/2017/12/31/2017.12.31/"/>
    <id>http://genghongshuo.com.cn/2017/12/31/2017.12.31/</id>
    <published>2017-12-31T07:19:56.000Z</published>
    <updated>2018-08-21T08:06:46.403Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="/images/2017.jpg" alt="2017年年度总结"><br><a id="more"></a><br>转眼间，2017年将要结束，静下心来，再回头看这一年，看自己写过的行行代码，看自己走过的路，恍惚间能看到键盘跃动间的点点汗水。<br>回首这一年的工作，有硕果累累的喜悦，有工作当中的艰辛，也有遇到困难和挫折时的惆怅。同时也明白了自己还有很多的不足，前方的道路还很远，世界上没有不劳而获的东西，付出多少汗水，就会有多少回报。知识是一点一点积累起来的。<br>2018年就要到了，努力吧少年！！<br>需要好好的规划下自己努力的方向。</p><p>苟日新，日日新，又日新。 –《大学》<br>技术永远都在不断的进步，所以每天要学会更新自己的技术。精益求精才是发展的动力。</p><p>成功不是将来才有的，而是从决定去做的那一刻起，持续累积而成。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/2017.jpg&quot; alt=&quot;2017年年度总结&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="记录" scheme="http://genghongshuo.com.cn/categories/%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="总结" scheme="http://genghongshuo.com.cn/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>vuex理解学习总结</title>
    <link href="http://genghongshuo.com.cn/2017/12/25/vuex%E7%90%86%E8%A7%A3%E6%80%BB%E7%BB%93/"/>
    <id>http://genghongshuo.com.cn/2017/12/25/vuex理解总结/</id>
    <published>2017-12-25T07:19:56.000Z</published>
    <updated>2018-08-21T08:06:46.426Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="什么是Vuex？"><a href="#什么是Vuex？" class="headerlink" title="什么是Vuex？"></a>什么是Vuex？</h3><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><p>状态管理模式、集中式存储管理 一听就很高大上，蛮吓人的。在我看来 vuex 就是把需要共享的变量全部存储在一个对象里面，然后将这个对象放在顶层组件中供其他组件使用。这么说吧，将vue想作是一个js文件、组件是函数，那么vuex就是一个全局变量，只是这个“全局变量”包含了一些特定的规则而已。</p><p>在vue的组件化开发中，经常会遇到需要将当前组件的状态传递给其他组件。父子组件通信时，我们通常会采用 props + emit 这种方式。但当通信双方不是父子组件甚至压根不存在相关联系，或者一个状态需要共享给多个组件时，就会非常麻烦，数据也会相当难维护，这对我们开发来讲就很不友好。vuex 这个时候就很实用，不过在使用vuex之后也带来了更多的概念和框架，需慎重！</p><p><img src="/images/vuex.png" alt="vuex"></p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="直接下载-CDN引用"><a href="#直接下载-CDN引用" class="headerlink" title="直接下载/CDN引用"></a>直接下载/CDN引用</h4><p><a href="https://unpkg.com/vuex@3.0.1/dist/vuex.js" target="_blank" rel="noopener">vuex下载</a> <a href="https://cdn.jsdelivr.net/npm/vue" target="_blank" rel="noopener">vue下载</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="string">"https://unpkg.com/vuex@3.0.1/dist/vuex.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure><p>然后在入口文件引入方式如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br></pre></td></tr></table></figure></p><h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><p>每一个 Vuex 应用的核心就是 store（仓库）。“store”基本上就是一个容器，它包含着你的应用中大部分的状态 (state)。Vuex 和单纯的全局对象有以下两点不同：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</span><br><span class="line">你不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</span><br></pre></td></tr></table></figure></p><p>创建一个 store<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果在模块化构建系统中，请确保在开头调用了 Vue.use(Vuex)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>现在，你可以通过 store.state 来获取状态对象，以及通过 store.commit 方法触发状态变更：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">store.commit(<span class="string">'increment'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(store.state.count) <span class="comment">// -&gt; 1</span></span><br></pre></td></tr></table></figure></p><p>再次强调，我们通过提交 mutation 的方式，而非直接改变 store.state.count，是因为我们想要更明确地追踪到状态的变化。这个简单的约定能够让你的意图更加明显，这样你在阅读代码的时候能更容易地解读应用内部的状态改变。此外，这样也让我们有机会去实现一些能记录每次状态改变，保存状态快照的调试工具。有了它，我们甚至可以实现如时间穿梭般的调试体验。</p><h3 id="vuex里面有哪些内容"><a href="#vuex里面有哪些内容" class="headerlink" title="vuex里面有哪些内容?"></a>vuex里面有哪些内容?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        name: <span class="string">'weish'</span>,</span><br><span class="line">        age: <span class="number">22</span></span><br><span class="line">    &#125;,</span><br><span class="line">    getters: &#123;</span><br><span class="line">        personInfo(state) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`My name is <span class="subst">$&#123;state.name&#125;</span>, I am <span class="subst">$&#123;state.age&#125;</span>`</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        SET_AGE(state, age) &#123;</span><br><span class="line">            commit(age, age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        nameAsyn(&#123;commit&#125;) &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                commit(<span class="string">'SET_AGE'</span>, <span class="number">18</span>);</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    modules: &#123;</span><br><span class="line">        a: modulesA</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vuex 包含有五个基本的对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">state：存储状态。也就是变量；</span><br><span class="line">getters：派生状态。也就是set、get中的get，有两个可选参数：state、getters分别可以获取state中的变量和其他的getters。外部调用方式：store.getters.personInfo()。就和vue的computed差不多；</span><br><span class="line">mutations：提交状态修改。也就是set、get中的set，这是vuex中唯一修改state的方式，但不支持异步操作。第一个参数默认是state。外部调用方式：store.commit(<span class="string">'SET_AGE'</span>, <span class="number">18</span>)。和vue中的methods类似。</span><br><span class="line">actions：和mutations类似。不过actions支持异步操作。第一个参数默认是和store具有相同参数属性的对象。外部调用方式：store.dispatch(<span class="string">'nameAsyn'</span>)。</span><br><span class="line">modules：store的子模块，内容就相当于是store的一个实例。调用方式和前面介绍的相似，只是要加上当前子模块名，如：store.a.getters.xxx()。</span><br></pre></td></tr></table></figure></p><h3 id="vue-cli中使用vuex的方式"><a href="#vue-cli中使用vuex的方式" class="headerlink" title="vue-cli中使用vuex的方式"></a>vue-cli中使用vuex的方式</h3><p>一般来讲，我们都会采用vue-cli来进行实际的开发，在vue-cli中，开发和调用方式稍微不同。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">├── index.html</span><br><span class="line">├── main.js</span><br><span class="line">├── components</span><br><span class="line">└── store</span><br><span class="line">    ├── index.js          # 我们组装模块并导出 store 的地方</span><br><span class="line">    ├── state.js          # 跟级别的 state</span><br><span class="line">    ├── getters.js        # 跟级别的 getter</span><br><span class="line">    ├── mutation-types.js # 根级别的mutations名称（官方推荐mutions方法名使用大写）</span><br><span class="line">    ├── mutations.js      # 根级别的 mutation</span><br><span class="line">    ├── actions.js        # 根级别的 action</span><br><span class="line">    └── modules</span><br><span class="line">        ├── m1.js         # 模块1</span><br><span class="line">        └── m2.js         # 模块2</span><br></pre></td></tr></table></figure></p><p>state.js示例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    name: <span class="string">'weish'</span>,</span><br><span class="line">    age: <span class="number">22</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> state;</span><br></pre></td></tr></table></figure></p><p>getters.js示例（我们一般使用getters来获取state的状态，而不是直接使用state）：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> age = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> other = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`My name is <span class="subst">$&#123;state.name&#125;</span>, I am <span class="subst">$&#123;state.age&#125;</span>.`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>mutation-type.js示例（我们会将所有mutations的函数名放在这个文件里）：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SET_NAME = <span class="string">'SET_NAME'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SET_AGE = <span class="string">'SET_AGE'</span>;</span><br></pre></td></tr></table></figure></p><p>mutations.js示例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mport * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">'./mutation-type.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    [types.SET_NAME](state, name) &#123;</span><br><span class="line">        state.name = name;</span><br><span class="line">    &#125;,</span><br><span class="line">    [types.SET_AGE](state, age) &#123;</span><br><span class="line">        state.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>actions.js示例（异步操作、多个commit时）：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">'./mutation-type.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    nameAsyn(&#123;commit&#125;, &#123;age, name&#125;) &#123;</span><br><span class="line">        commit(types.SET_NAME, name);</span><br><span class="line">        commit(types.SET_AGE, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>modules–m1.js示例（如果不是很复杂的应用，一般来讲是不会分模块的）：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    state: &#123;&#125;,</span><br><span class="line">    getters: &#123;&#125;,</span><br><span class="line">    mutations: &#123;&#125;,</span><br><span class="line">    actions: &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>index.js示例（组装vuex）：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"><span class="keyword">import</span> state <span class="keyword">from</span> <span class="string">'./state.js'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> getters <span class="keyword">from</span> <span class="string">'./getters.js'</span>;</span><br><span class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">'./mutations.js'</span>;</span><br><span class="line"><span class="keyword">import</span> actions <span class="keyword">from</span> <span class="string">'./actions.js'</span>;</span><br><span class="line"><span class="keyword">import</span> m1 <span class="keyword">from</span> <span class="string">'./modules/m1.js'</span>;</span><br><span class="line"><span class="keyword">import</span> m2 <span class="keyword">from</span> <span class="string">'./modules/m2.js'</span>;</span><br><span class="line"><span class="keyword">import</span> createLogger <span class="keyword">from</span> <span class="string">'vuex/dist/logger'</span>; <span class="comment">// 修改日志</span></span><br><span class="line"></span><br><span class="line">vue.use(vuex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> debug = process.env.NODE_ENV !== <span class="string">'production'</span>; <span class="comment">// 开发环境中为true，否则为false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> vuex.Store(&#123;</span><br><span class="line">    state,</span><br><span class="line">    getters,</span><br><span class="line">    mutations,</span><br><span class="line">    actions,</span><br><span class="line">    modules: &#123;</span><br><span class="line">        m1,</span><br><span class="line">        m2</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: debug ? [createLogger()] : [] <span class="comment">// 开发环境下显示vuex的状态修改</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>最后将store实例挂载到main.js里面的vue上去就行了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store/index.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>在vue组件中使用时，我们通常会使用mapGetters、mapActions、mapMutations，然后就可以按照vue调用methods和computed的方式去调用这些变量或函数，示例如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapGetters, mapMutations, mapActions&#125; <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 只写组件中的script部分 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    computed: &#123;</span><br><span class="line">        ...mapGetters([</span><br><span class="line">            name,</span><br><span class="line">            age</span><br><span class="line">        ])</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        ...mapMutations(&#123;</span><br><span class="line">            setName: <span class="string">'SET_NAME'</span>,</span><br><span class="line">            setAge: <span class="string">'SET_AGE'</span></span><br><span class="line">        &#125;),</span><br><span class="line">        ...mapActions([</span><br><span class="line">            nameAsyn</span><br><span class="line">        ])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>原文 <a href="https://segmentfault.com/a/1190000012015742" target="_blank" rel="noopener">https://segmentfault.com/a/1190000012015742</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;什么是Vuex？&quot;&gt;&lt;a href=&quot;#什么是Vuex？&quot; class=&quot;headerlink&quot; title=&quot;什么是Vuex？&quot;&gt;&lt;/a&gt;什么是Vuex？&lt;/h3
      
    
    </summary>
    
      <category term="vue" scheme="http://genghongshuo.com.cn/categories/vue/"/>
    
    
      <category term="vuex" scheme="http://genghongshuo.com.cn/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>IE9以下圆角兼容</title>
    <link href="http://genghongshuo.com.cn/2017/12/20/IE%E5%85%BC%E5%AE%B9%E5%9C%86%E8%A7%92/"/>
    <id>http://genghongshuo.com.cn/2017/12/20/IE兼容圆角/</id>
    <published>2017-12-20T07:19:56.000Z</published>
    <updated>2018-08-21T08:06:46.408Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>如何在IE9以下版本的浏览器支持圆角的特性<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">15px</span>; <span class="comment">/* Firefox */</span></span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">15px</span>; <span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">15px</span>; <span class="comment">/* Opera 10.5+, 以及使用了IE-CSS3的IE浏览器 */</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">-moz-box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">20px</span> <span class="number">#000</span>; <span class="comment">/* Firefox */</span></span><br><span class="line">  <span class="attribute">-webkit-box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">20px</span> <span class="number">#000</span>; <span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">20px</span> <span class="number">#000</span>; <span class="comment">/* Opera 10.5+, 以及使用了IE-CSS3的IE浏览器 */</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">behavior</span>: <span class="built_in">url</span>(ie-css3.htc); <span class="comment">/* 通知IE浏览器调用脚本作用于'box'类 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="ie-css3-htc"><a href="#ie-css3-htc" class="headerlink" title="ie-css3.htc"></a>ie-css3.htc</h3><p>引入下面文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br></pre></td><td class="code"><pre><span class="line">--Do not remove <span class="keyword">this</span> <span class="keyword">if</span> you are using--</span><br><span class="line">Original Author: Remiz Rahnas</span><br><span class="line">Original Author URL: http:<span class="comment">//www.htmlremix.com</span></span><br><span class="line">Published date: <span class="number">2008</span>/<span class="number">09</span>/<span class="number">24</span></span><br><span class="line"></span><br><span class="line">Changes by Nick Fetchak:</span><br><span class="line">- IE8 standards mode compatibility</span><br><span class="line">- VML elements now positioned behind original box rather than inside <span class="keyword">of</span> it - should be less prone to breakage</span><br><span class="line">- Added partial support <span class="keyword">for</span> <span class="string">'box-shadow'</span> style</span><br><span class="line">- Checks <span class="keyword">for</span> VML support before doing anything</span><br><span class="line">- Updates VML element size and position via timer and also via <span class="built_in">window</span> resize event</span><br><span class="line">- lots <span class="keyword">of</span> other small things</span><br><span class="line">Published date : <span class="number">2010</span>/<span class="number">03</span>/<span class="number">14</span></span><br><span class="line">http:<span class="comment">//fetchak.com/ie-css3</span></span><br><span class="line"></span><br><span class="line">Thanks to TheBrightLines.com (http:<span class="comment">//www.thebrightlines.com/2009/12/03/using-ies-filter-in-a-cross-browser-way) for enlightening me about the DropShadow filter</span></span><br><span class="line"></span><br><span class="line">&lt;public:attach event=<span class="string">"ondocumentready"</span> onevent=<span class="string">"ondocumentready('v08vnSVo78t4JfjH')"</span> /&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">timer_length = <span class="number">200</span>; <span class="comment">// Milliseconds</span></span><br><span class="line">border_opacity = <span class="literal">false</span>; <span class="comment">// Use opacity on borders of rounded-corner elements? Note: This causes antialiasing issues</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// supportsVml() borrowed from http://stackoverflow.com/questions/654112/how-do-you-detect-support-for-vml-or-svg-in-a-browser</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">supportsVml</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> supportsVml.supported == <span class="string">"undefined"</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">document</span>.body.appendChild(<span class="built_in">document</span>.createElement(<span class="string">'div'</span>));</span><br><span class="line">a.innerHTML = <span class="string">'&lt;v:shape id="vml_flag1" adj="1" /&gt;'</span>;</span><br><span class="line"><span class="keyword">var</span> b = a.firstChild;</span><br><span class="line">b.style.behavior = <span class="string">"url(#default#VML)"</span>;</span><br><span class="line">supportsVml.supported = b ? <span class="keyword">typeof</span> b.adj == <span class="string">"object"</span>: <span class="literal">true</span>;</span><br><span class="line">a.parentNode.removeChild(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> supportsVml.supported</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// findPos() borrowed from http://www.quirksmode.org/js/findpos.html</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findPos</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> curleft = curtop = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (obj.offsetParent) &#123;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">curleft += obj.offsetLeft;</span><br><span class="line">curtop += obj.offsetTop;</span><br><span class="line">&#125; <span class="keyword">while</span> (obj = obj.offsetParent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>(&#123;</span><br><span class="line"><span class="string">'x'</span>: curleft,</span><br><span class="line"><span class="string">'y'</span>: curtop</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createBoxShadow</span>(<span class="params">element, vml_parent</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> style = element.currentStyle[<span class="string">'iecss3-box-shadow'</span>] || element.currentStyle[<span class="string">'-moz-box-shadow'</span>] || element.currentStyle[<span class="string">'-webkit-box-shadow'</span>] || element.currentStyle[<span class="string">'box-shadow'</span>] || <span class="string">''</span>;</span><br><span class="line"><span class="keyword">var</span> match = style.match(<span class="regexp">/^(\d+)px (\d+)px (\d+)px/</span>);</span><br><span class="line"><span class="keyword">if</span> (!match) &#123; <span class="keyword">return</span>(<span class="literal">false</span>); &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shadow = <span class="built_in">document</span>.createElement(<span class="string">'v:roundrect'</span>);</span><br><span class="line">shadow.userAttrs = &#123;</span><br><span class="line"><span class="string">'x'</span>: <span class="built_in">parseInt</span>(<span class="built_in">RegExp</span>.$<span class="number">1</span> || <span class="number">0</span>),</span><br><span class="line"><span class="string">'y'</span>: <span class="built_in">parseInt</span>(<span class="built_in">RegExp</span>.$<span class="number">2</span> || <span class="number">0</span>),</span><br><span class="line"><span class="string">'radius'</span>: <span class="built_in">parseInt</span>(<span class="built_in">RegExp</span>.$<span class="number">3</span> || <span class="number">0</span>) / <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line">shadow.position_offset = &#123;</span><br><span class="line"><span class="string">'y'</span>: (<span class="number">0</span> - vml_parent.pos_ieCSS3.y - shadow.userAttrs.radius + shadow.userAttrs.y),</span><br><span class="line"><span class="string">'x'</span>: (<span class="number">0</span> - vml_parent.pos_ieCSS3.x - shadow.userAttrs.radius + shadow.userAttrs.x)</span><br><span class="line">&#125;;</span><br><span class="line">shadow.size_offset = &#123;</span><br><span class="line"><span class="string">'width'</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">'height'</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line">shadow.arcsize = element.arcSize +<span class="string">'px'</span>;</span><br><span class="line">shadow.style.display = <span class="string">'block'</span>;</span><br><span class="line">shadow.style.position = <span class="string">'absolute'</span>;</span><br><span class="line">shadow.style.top = (element.pos_ieCSS3.y + shadow.position_offset.y) +<span class="string">'px'</span>;</span><br><span class="line">shadow.style.left = (element.pos_ieCSS3.x + shadow.position_offset.x) +<span class="string">'px'</span>;</span><br><span class="line">shadow.style.width = element.offsetWidth +<span class="string">'px'</span>;</span><br><span class="line">shadow.style.height = element.offsetHeight +<span class="string">'px'</span>;</span><br><span class="line">shadow.style.antialias = <span class="literal">true</span>;</span><br><span class="line">shadow.className = <span class="string">'vml_box_shadow'</span>;</span><br><span class="line">shadow.style.zIndex = element.zIndex - <span class="number">1</span>;</span><br><span class="line">shadow.style.filter = <span class="string">'progid:DXImageTransform.Microsoft.Blur(pixelRadius='</span>+ shadow.userAttrs.radius +<span class="string">',makeShadow=true,shadowOpacity='</span>+ element.opacity +<span class="string">')'</span>;</span><br><span class="line"></span><br><span class="line">element.parentNode.appendChild(shadow);</span><br><span class="line"><span class="comment">//element.parentNode.insertBefore(shadow, element.element);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// For window resizing</span></span><br><span class="line">element.vml.push(shadow);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createBorderRect</span>(<span class="params">element, vml_parent</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isNaN</span>(element.borderRadius)) &#123; <span class="keyword">return</span>(<span class="literal">false</span>); &#125;</span><br><span class="line"></span><br><span class="line">element.style.background = <span class="string">'transparent'</span>;</span><br><span class="line">element.style.borderColor = <span class="string">'transparent'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rect = <span class="built_in">document</span>.createElement(<span class="string">'v:roundrect'</span>);</span><br><span class="line">rect.position_offset = &#123;</span><br><span class="line"><span class="string">'y'</span>: (<span class="number">0.5</span> * element.strokeWeight) - vml_parent.pos_ieCSS3.y,</span><br><span class="line"><span class="string">'x'</span>: (<span class="number">0.5</span> * element.strokeWeight) - vml_parent.pos_ieCSS3.x</span><br><span class="line">&#125;;</span><br><span class="line">rect.size_offset = &#123;</span><br><span class="line"><span class="string">'width'</span>: <span class="number">0</span> - element.strokeWeight,</span><br><span class="line"><span class="string">'height'</span>: <span class="number">0</span> - element.strokeWeight</span><br><span class="line">&#125;;</span><br><span class="line">rect.arcsize = element.arcSize +<span class="string">'px'</span>;</span><br><span class="line">    <span class="comment">//rect.arcsize = element.arcSize / (element.offsetWidth + rect.size_offset.width);</span></span><br><span class="line">rect.strokeColor = element.strokeColor;</span><br><span class="line">rect.strokeWeight = element.strokeWeight +<span class="string">'px'</span>;</span><br><span class="line">rect.stroked = element.stroked;</span><br><span class="line">rect.className = <span class="string">'vml_border_radius'</span>;</span><br><span class="line">rect.style.display = <span class="string">'block'</span>;</span><br><span class="line">rect.style.position = <span class="string">'absolute'</span>;</span><br><span class="line">rect.style.top = (element.pos_ieCSS3.y + rect.position_offset.y) +<span class="string">'px'</span>;</span><br><span class="line">rect.style.left = (element.pos_ieCSS3.x + rect.position_offset.x) +<span class="string">'px'</span>;</span><br><span class="line">rect.style.width = (element.offsetWidth + rect.size_offset.width) +<span class="string">'px'</span>;</span><br><span class="line">rect.style.height = (element.offsetHeight + rect.size_offset.height) +<span class="string">'px'</span>;</span><br><span class="line">rect.style.antialias = <span class="literal">true</span>;</span><br><span class="line">rect.style.zIndex = element.zIndex - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (border_opacity &amp;&amp; (element.opacity &lt; <span class="number">1</span>)) &#123;</span><br><span class="line">rect.style.filter = <span class="string">'progid:DXImageTransform.Microsoft.Alpha(Opacity='</span>+ <span class="built_in">parseFloat</span>(element.opacity * <span class="number">100</span>) +<span class="string">')'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fill = <span class="built_in">document</span>.createElement(<span class="string">'v:fill'</span>);</span><br><span class="line">fill.color = element.fillColor;</span><br><span class="line">fill.src = element.fillSrc;</span><br><span class="line">fill.className = <span class="string">'vml_border_radius_fill'</span>;</span><br><span class="line">fill.type = <span class="string">'tile'</span>;</span><br><span class="line">fill.opacity = element.opacity;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hack: IE6 doesn't support transparent borders, use padding to offset original element</span></span><br><span class="line">isIE6 = <span class="regexp">/msie|MSIE 6/</span>.test(navigator.userAgent);</span><br><span class="line"><span class="keyword">if</span> (isIE6 &amp;&amp; (element.strokeWeight &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">element.style.borderStyle = <span class="string">'none'</span>;</span><br><span class="line">element.style.paddingTop = <span class="built_in">parseInt</span>(element.currentStyle.paddingTop || <span class="number">0</span>) + element.strokeWeight;</span><br><span class="line">element.style.paddingBottom = <span class="built_in">parseInt</span>(element.currentStyle.paddingBottom || <span class="number">0</span>) + element.strokeWeight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rect.appendChild(fill);</span><br><span class="line">element.parentNode.appendChild(rect);</span><br><span class="line"><span class="comment">//element.parentNode.insertBefore(rect, element.element);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// For window resizing</span></span><br><span class="line">element.vml.push(rect);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createTextShadow</span>(<span class="params">element, vml_parent</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!element.textShadow) &#123; <span class="keyword">return</span>(<span class="literal">false</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> match = element.textShadow.match(<span class="regexp">/^(\d+)px (\d+)px (\d+)px (#?\w+)/</span>);</span><br><span class="line"><span class="keyword">if</span> (!match) &#123; <span class="keyword">return</span>(<span class="literal">false</span>); &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//var shadow = document.createElement('span');</span></span><br><span class="line"><span class="keyword">var</span> shadow = element.cloneNode(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">var</span> radius = <span class="built_in">parseInt</span>(<span class="built_in">RegExp</span>.$<span class="number">3</span> || <span class="number">0</span>);</span><br><span class="line">shadow.userAttrs = &#123;</span><br><span class="line"><span class="string">'x'</span>: <span class="built_in">parseInt</span>(<span class="built_in">RegExp</span>.$<span class="number">1</span> || <span class="number">0</span>) - (radius),</span><br><span class="line"><span class="string">'y'</span>: <span class="built_in">parseInt</span>(<span class="built_in">RegExp</span>.$<span class="number">2</span> || <span class="number">0</span>) - (radius),</span><br><span class="line"><span class="string">'radius'</span>: radius / <span class="number">2</span>,</span><br><span class="line"><span class="string">'color'</span>: (<span class="built_in">RegExp</span>.$<span class="number">4</span> || <span class="string">'#000'</span>)</span><br><span class="line">&#125;;</span><br><span class="line">shadow.position_offset = &#123;</span><br><span class="line"><span class="string">'y'</span>: (<span class="number">0</span> - vml_parent.pos_ieCSS3.y + shadow.userAttrs.y),</span><br><span class="line"><span class="string">'x'</span>: (<span class="number">0</span> - vml_parent.pos_ieCSS3.x + shadow.userAttrs.x)</span><br><span class="line">&#125;;</span><br><span class="line">shadow.size_offset = &#123;</span><br><span class="line"><span class="string">'width'</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">'height'</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line">shadow.style.color = shadow.userAttrs.color;</span><br><span class="line">shadow.style.position = <span class="string">'absolute'</span>;</span><br><span class="line">shadow.style.top = (element.pos_ieCSS3.y + shadow.position_offset.y) +<span class="string">'px'</span>;</span><br><span class="line">shadow.style.left = (element.pos_ieCSS3.x + shadow.position_offset.x) +<span class="string">'px'</span>;</span><br><span class="line">shadow.style.antialias = <span class="literal">true</span>;</span><br><span class="line">shadow.style.behavior = <span class="literal">null</span>;</span><br><span class="line">shadow.className = <span class="string">'ieCSS3_text_shadow'</span>;</span><br><span class="line">shadow.innerHTML = element.innerHTML;</span><br><span class="line"><span class="comment">// For some reason it only looks right with opacity at 75%</span></span><br><span class="line">shadow.style.filter = <span class="string">'\</span></span><br><span class="line"><span class="string">progid:DXImageTransform.Microsoft.Alpha(Opacity=75)\</span></span><br><span class="line"><span class="string">progid:DXImageTransform.Microsoft.Blur(pixelRadius='</span>+ shadow.userAttrs.radius +<span class="string">',makeShadow=false,shadowOpacity=100)\</span></span><br><span class="line"><span class="string">'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> clone = element.cloneNode(<span class="literal">true</span>);</span><br><span class="line">clone.position_offset = &#123;</span><br><span class="line"><span class="string">'y'</span>: (<span class="number">0</span> - vml_parent.pos_ieCSS3.y),</span><br><span class="line"><span class="string">'x'</span>: (<span class="number">0</span> - vml_parent.pos_ieCSS3.x)</span><br><span class="line">&#125;;</span><br><span class="line">clone.size_offset = &#123;</span><br><span class="line"><span class="string">'width'</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">'height'</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line">clone.style.behavior = <span class="literal">null</span>;</span><br><span class="line">clone.style.position = <span class="string">'absolute'</span>;</span><br><span class="line">clone.style.top = (element.pos_ieCSS3.y + clone.position_offset.y) +<span class="string">'px'</span>;</span><br><span class="line">clone.style.left = (element.pos_ieCSS3.x + clone.position_offset.x) +<span class="string">'px'</span>;</span><br><span class="line">clone.className = <span class="string">'ieCSS3_text_shadow'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">element.parentNode.appendChild(shadow);</span><br><span class="line">element.parentNode.appendChild(clone);</span><br><span class="line"></span><br><span class="line">element.style.visibility = <span class="string">'hidden'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// For window resizing</span></span><br><span class="line">element.vml.push(clone);</span><br><span class="line">element.vml.push(shadow);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ondocumentready</span>(<span class="params">classID</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!supportsVml()) &#123; <span class="keyword">return</span>(<span class="literal">false</span>); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.className.match(classID)) &#123; <span class="keyword">return</span>(<span class="literal">false</span>); &#125;</span><br><span class="line"><span class="keyword">this</span>.className = <span class="keyword">this</span>.className.concat(<span class="string">' '</span>, classID);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add a namespace for VML (IE8 requires it)</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">document</span>.namespaces.v) &#123; <span class="built_in">document</span>.namespaces.add(<span class="string">"v"</span>, <span class="string">"urn:schemas-microsoft-com:vml"</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check to see if we've run once before on this page</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span>(<span class="built_in">window</span>.ieCSS3) == <span class="string">'undefined'</span>) &#123;</span><br><span class="line"><span class="comment">// Create global ieCSS3 object</span></span><br><span class="line"><span class="built_in">window</span>.ieCSS3 = &#123;</span><br><span class="line"><span class="string">'vmlified_elements'</span>: <span class="keyword">new</span> <span class="built_in">Array</span>(),</span><br><span class="line"><span class="string">'update_timer'</span>: setInterval(updatePositionAndSize, timer_length)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span>(<span class="built_in">window</span>.onresize) == <span class="string">'function'</span>) &#123; <span class="built_in">window</span>.ieCSS3.previous_onresize = <span class="built_in">window</span>.onresize; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Attach window resize event</span></span><br><span class="line"><span class="built_in">window</span>.onresize = updatePositionAndSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// These attrs are for the script and have no meaning to the browser:</span></span><br><span class="line"><span class="keyword">this</span>.borderRadius = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.currentStyle[<span class="string">'iecss3-border-radius'</span>] ||</span><br><span class="line">                             <span class="keyword">this</span>.currentStyle[<span class="string">'-moz-border-radius'</span>] ||</span><br><span class="line">                             <span class="keyword">this</span>.currentStyle[<span class="string">'-webkit-border-radius'</span>] ||</span><br><span class="line">                             <span class="keyword">this</span>.currentStyle[<span class="string">'border-radius'</span>] ||</span><br><span class="line">                             <span class="keyword">this</span>.currentStyle[<span class="string">'-khtml-border-radius'</span>]);</span><br><span class="line"><span class="keyword">this</span>.arcSize = <span class="built_in">Math</span>.min(<span class="keyword">this</span>.borderRadius / <span class="built_in">Math</span>.min(<span class="keyword">this</span>.offsetWidth, <span class="keyword">this</span>.offsetHeight), <span class="number">1</span>);</span><br><span class="line"><span class="keyword">this</span>.fillColor = <span class="keyword">this</span>.currentStyle.backgroundColor;</span><br><span class="line"><span class="keyword">this</span>.fillSrc = <span class="keyword">this</span>.currentStyle.backgroundImage.replace(<span class="regexp">/^url\("(.+)"\)$/</span>, <span class="string">'$1'</span>);</span><br><span class="line">    <span class="comment">//add by emptyhua@gmail.com</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.fillSrc == <span class="string">'none'</span>)</span><br><span class="line">        <span class="keyword">this</span>.fillSrc = <span class="string">'javascript:void(0);'</span>;</span><br><span class="line"><span class="keyword">this</span>.strokeColor = <span class="keyword">this</span>.currentStyle.borderColor;</span><br><span class="line"><span class="keyword">this</span>.strokeWeight = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.currentStyle.borderWidth);</span><br><span class="line"><span class="keyword">this</span>.stroked = <span class="string">'true'</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isNaN</span>(<span class="keyword">this</span>.strokeWeight) || (<span class="keyword">this</span>.strokeWeight == <span class="number">0</span>)) &#123;</span><br><span class="line"><span class="keyword">this</span>.strokeWeight = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>.strokeColor = fillColor;</span><br><span class="line"><span class="keyword">this</span>.stroked = <span class="string">'false'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.opacity = <span class="built_in">parseFloat</span>(<span class="keyword">this</span>.currentStyle.opacity || <span class="number">1</span>);</span><br><span class="line"><span class="keyword">this</span>.textShadow = <span class="keyword">this</span>.currentStyle[<span class="string">'text-shadow'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.element.vml = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">this</span>.zIndex = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.currentStyle.zIndex);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isNaN</span>(<span class="keyword">this</span>.zIndex)) &#123; <span class="keyword">this</span>.zIndex = <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Find which element provides position:relative for the target element (default to BODY)</span></span><br><span class="line">vml_parent = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">var</span> limit = <span class="number">100</span>, i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">vml_parent = vml_parent.parentElement;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">if</span> (i &gt;= limit) &#123; <span class="keyword">return</span>(<span class="literal">false</span>); &#125;</span><br><span class="line">&#125; <span class="keyword">while</span> ((<span class="keyword">typeof</span>(vml_parent) != <span class="string">'undefined'</span>) &amp;&amp; (vml_parent.currentStyle.position != <span class="string">'relative'</span>) &amp;&amp; (vml_parent.tagName != <span class="string">'BODY'</span>));</span><br><span class="line"></span><br><span class="line">vml_parent.pos_ieCSS3 = findPos(vml_parent);</span><br><span class="line"><span class="keyword">this</span>.pos_ieCSS3 = findPos(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rv1 = createBoxShadow(<span class="keyword">this</span>, vml_parent);</span><br><span class="line"><span class="keyword">var</span> rv2 = createBorderRect(<span class="keyword">this</span>, vml_parent);</span><br><span class="line"><span class="keyword">var</span> rv3 = createTextShadow(<span class="keyword">this</span>, vml_parent);</span><br><span class="line"><span class="keyword">if</span> (rv1 || rv2 || rv3) &#123; <span class="built_in">window</span>.ieCSS3.vmlified_elements.push(<span class="keyword">this</span>.element); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span>(vml_parent.document.ieCSS3_stylesheet) == <span class="string">'undefined'</span>) &#123;</span><br><span class="line">vml_parent.document.ieCSS3_stylesheet = vml_parent.document.createStyleSheet();</span><br><span class="line">vml_parent.document.ieCSS3_stylesheet.addRule(<span class="string">"v\\:roundrect"</span>, <span class="string">"behavior: url(#default#VML)"</span>);</span><br><span class="line">vml_parent.document.ieCSS3_stylesheet.addRule(<span class="string">"v\\:fill"</span>, <span class="string">"behavior: url(#default#VML)"</span>);</span><br><span class="line"><span class="comment">// Compatibility with IE7.js</span></span><br><span class="line">vml_parent.document.ieCSS3_stylesheet.ie7 = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updatePositionAndSize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span>(<span class="built_in">window</span>.ieCSS3.vmlified_elements) != <span class="string">'object'</span>) &#123; <span class="keyword">return</span>(<span class="literal">false</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> <span class="built_in">window</span>.ieCSS3.vmlified_elements) &#123;</span><br><span class="line"><span class="keyword">var</span> el = <span class="built_in">window</span>.ieCSS3.vmlified_elements[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span>(el.vml) != <span class="string">'object'</span>) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> z <span class="keyword">in</span> el.vml) &#123;</span><br><span class="line"><span class="comment">//var parent_pos = findPos(el.vml[z].parentNode);</span></span><br><span class="line"><span class="keyword">var</span> new_pos = findPos(el);</span><br><span class="line">new_pos.x = (new_pos.x + el.vml[z].position_offset.x) + <span class="string">'px'</span>;</span><br><span class="line">new_pos.y = (new_pos.y + el.vml[z].position_offset.y) + <span class="string">'px'</span>;</span><br><span class="line"><span class="keyword">if</span> (el.vml[z].style.left != new_pos.x) &#123; el.vml[z].style.left = new_pos.x; &#125;</span><br><span class="line"><span class="keyword">if</span> (el.vml[z].style.top != new_pos.y) &#123; el.vml[z].style.top = new_pos.y; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> new_size = &#123;</span><br><span class="line"><span class="string">'width'</span>: <span class="built_in">parseInt</span>(el.offsetWidth + el.vml[z].size_offset.width),</span><br><span class="line"><span class="string">'height'</span>: <span class="built_in">parseInt</span>(el.offsetHeight + el.vml[z].size_offset.height)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (el.vml[z].offsetWidth != new_size.width) &#123; el.vml[z].style.width = new_size.width +<span class="string">'px'</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (el.vml[z].offsetHeight != new_size.height) &#123; el.vml[z].style.height = new_size.height +<span class="string">'px'</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (event &amp;&amp; (event.type == <span class="string">'resize'</span>) &amp;&amp; <span class="keyword">typeof</span>(<span class="built_in">window</span>.ieCSS3.previous_onresize) == <span class="string">'function'</span>) &#123; <span class="built_in">window</span>.ieCSS3.previous_onresize(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// added by emptyhua@gmail.com 2010 7-3</span></span><br><span class="line"><span class="built_in">window</span>.update_css3_fix_position = updatePositionAndSize;</span><br><span class="line"><span class="built_in">window</span>.update_css3_fix = <span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!el.vml) <span class="keyword">return</span>;</span><br><span class="line">el.arcSize = <span class="built_in">Math</span>.min(el.borderRadius / <span class="built_in">Math</span>.min(el.offsetWidth, el.offsetHeight), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Find which element provides position:relative for the target element (default to BODY)</span></span><br><span class="line"><span class="keyword">var</span> vml_parent = el;</span><br><span class="line"><span class="keyword">var</span> limit = <span class="number">100</span>, i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">vml_parent = vml_parent.parentElement;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">if</span> (i &gt;= limit) &#123; <span class="keyword">return</span>(<span class="literal">false</span>); &#125;</span><br><span class="line">&#125; <span class="keyword">while</span> ((<span class="keyword">typeof</span>(vml_parent) != <span class="string">'undefined'</span>) &amp;&amp; (vml_parent.currentStyle.position != <span class="string">'relative'</span>) &amp;&amp; (vml_parent.tagName != <span class="string">'BODY'</span>));</span><br><span class="line"></span><br><span class="line">    vml_parent.pos_ieCSS3 = findPos(vml_parent);</span><br><span class="line">el.pos_ieCSS3 = findPos(el);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> el.vml) </span><br><span class="line">    &#123;</span><br><span class="line">    element.parentNode.removeChild(el.vml[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    el.vml = [];</span><br><span class="line">    <span class="keyword">var</span> rv1 = createBoxShadow(el, vml_parent);</span><br><span class="line"><span class="keyword">var</span> rv2 = createBorderRect(el, vml_parent);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h3&gt;&lt;p&gt;如何在IE9以下版本的浏
      
    
    </summary>
    
      <category term="前端" scheme="http://genghongshuo.com.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="IE兼容" scheme="http://genghongshuo.com.cn/categories/%E5%89%8D%E7%AB%AF/IE%E5%85%BC%E5%AE%B9/"/>
    
    
      <category term="前端" scheme="http://genghongshuo.com.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="IE兼容" scheme="http://genghongshuo.com.cn/tags/IE%E5%85%BC%E5%AE%B9/"/>
    
  </entry>
  
  <entry>
    <title>asyuc函数</title>
    <link href="http://genghongshuo.com.cn/2017/12/13/ES6-asyuc/"/>
    <id>http://genghongshuo.com.cn/2017/12/13/ES6-asyuc/</id>
    <published>2017-12-13T13:19:56.000Z</published>
    <updated>2018-08-21T08:06:46.404Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><p>async 函数是什么？一句话，它就是 Generator 函数的语法糖。</p><p>前文有一个 Generator 函数，依次读取两个文件。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readFile = <span class="function"><span class="keyword">function</span> (<span class="params">fileName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    fs.readFile(fileName, <span class="function"><span class="keyword">function</span>(<span class="params">error, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (error) <span class="keyword">return</span> reject(error);</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gen = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> f1 = <span class="keyword">yield</span> readFile(<span class="string">'/etc/fstab'</span>);</span><br><span class="line">  <span class="keyword">const</span> f2 = <span class="keyword">yield</span> readFile(<span class="string">'/etc/shells'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(f1.toString());</span><br><span class="line">  <span class="built_in">console</span>.log(f2.toString());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>写成async函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> asyncReadFile = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> f1 = <span class="keyword">await</span> readFile(<span class="string">'/etc/fstab'</span>);</span><br><span class="line">  <span class="keyword">const</span> f2 = <span class="keyword">await</span> readFile(<span class="string">'/etc/shells'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(f1.toString());</span><br><span class="line">  <span class="built_in">console</span>.log(f2.toString());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>一比较就会发现，async 函数就是将 Generator 函数的星号（*）替换成 async，将 yield 替换成 await，仅此而已</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><h4 id="内置执行器。"><a href="#内置执行器。" class="headerlink" title="内置执行器。"></a>内置执行器。</h4><p>Generator 函数的执行必须靠执行器，所以才有了co模块，而async函数自带执行器。也就是说，async函数的执行，与普通函数一模一样，只要一行。</p><h4 id="更好的语义"><a href="#更好的语义" class="headerlink" title="更好的语义"></a>更好的语义</h4><p>async和await，比起星号和yield，语义更清楚了。async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。</p><h4 id="更广的适用性"><a href="#更广的适用性" class="headerlink" title="更广的适用性"></a>更广的适用性</h4><p>co模块约定，yield命令后面只能是 Thunk 函数或 Promise 对象，而async函数的await命令后面，可以是 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）。</p><h4 id="返回值是-Promise"><a href="#返回值是-Promise" class="headerlink" title="返回值是 Promise"></a>返回值是 Promise</h4><p>async函数的返回值是 Promise 对象，这比 Generator 函数的返回值是 Iterator 对象方便多了。你可以用then方法指定下一步的操作。</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>async函数返回一个 Promise 对象，可以使用then方法添加回调函数。当函数执行的时候，一旦遇到await就会先返回，等到异步操作完成，再接着执行函数体内后面的语句。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getStockPriceByName</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> symbol = <span class="keyword">await</span> getStockSymbol(name);</span><br><span class="line">  <span class="keyword">const</span> stockPrice = <span class="keyword">await</span> getStockPrice(symbol);</span><br><span class="line">  <span class="keyword">return</span> stockPrice;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getStockPriceByName(<span class="string">'goog'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>async 函数有多种使用形式。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数表达式</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象的方法</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="keyword">async</span> foo() &#123;&#125; &#125;;</span><br><span class="line">obj.foo().then(...)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Class 的方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Storage</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.cachePromise = caches.open(<span class="string">'avatars'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> getAvatar(name) &#123;</span><br><span class="line">    <span class="keyword">const</span> cache = <span class="keyword">await</span> <span class="keyword">this</span>.cachePromise;</span><br><span class="line">    <span class="keyword">return</span> cache.match(<span class="string">`/avatars/<span class="subst">$&#123;name&#125;</span>.jpg`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> storage = <span class="keyword">new</span> Storage();</span><br><span class="line">storage.getAvatar(<span class="string">'jake'</span>).then(…);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">async</span> () =&gt; &#123;&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>async函数的语法规则总体上比较简单，难点是错误处理机制。</p><h4 id="Promise对象的状态变化"><a href="#Promise对象的状态变化" class="headerlink" title="Promise对象的状态变化"></a>Promise对象的状态变化</h4><p>async函数返回的 Promise 对象，必须等到内部所有await命令后面的 Promise 对象执行完，才会发生状态改变，除非遇到return语句或者抛出错误。也就是说，只有async函数内部的异步操作执行完，才会执行then方法指定的回调函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getTitle</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(url);</span><br><span class="line">  <span class="keyword">let</span> html = <span class="keyword">await</span> response.text();</span><br><span class="line">  <span class="keyword">return</span> html.match(<span class="regexp">/&lt;title&gt;([\s\S]+)&lt;\/title&gt;/i</span>)[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">getTitle(<span class="string">'https://tc39.github.io/ecma262/'</span>).then(<span class="built_in">console</span>.log)</span><br><span class="line"><span class="comment">// "ECMAScript 2017 Language Specification"</span></span><br></pre></td></tr></table></figure></p><p>上面代码中，函数getTitle内部有三个操作：抓取网页、取出文本、匹配页面标题。只有这三个操作全部完成，才会执行then方法里面的console.log。</p><h4 id="await"><a href="#await" class="headerlink" title="await"></a>await</h4><p>await命令后面是一个 Promise 对象。如果不是，会被转成一个立即resolve的 Promise 对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f().then(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(v))</span><br><span class="line"><span class="comment">// 123</span></span><br></pre></td></tr></table></figure></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>link： <a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">http://es6.ruanyifeng.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;含义&quot;&gt;&lt;a href=&quot;#含义&quot; class=&quot;headerlink&quot; title=&quot;含义&quot;&gt;&lt;/a&gt;含义&lt;/h3&gt;&lt;p&gt;async 函数是什么？一句话，它就是 
      
    
    </summary>
    
      <category term="前端" scheme="http://genghongshuo.com.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ES6" scheme="http://genghongshuo.com.cn/categories/%E5%89%8D%E7%AB%AF/ES6/"/>
    
    
      <category term="前端" scheme="http://genghongshuo.com.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ES6" scheme="http://genghongshuo.com.cn/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>class继承</title>
    <link href="http://genghongshuo.com.cn/2017/11/27/ES6-class%E7%BB%A7%E6%89%BF/"/>
    <id>http://genghongshuo.com.cn/2017/11/27/ES6-class继承/</id>
    <published>2017-11-27T12:10:50.000Z</published>
    <updated>2018-08-21T08:06:46.405Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>ES6提供了更接近传统语言的写法，引入了Class（类）这个概念。新的class写法让对象原型的写法更加清晰、更像面向对象编程的语法，也更加通俗易懂。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 构造方法，实例化的时候将会被调用，如果不指定，那么会有一个不带参数的默认构造函数.</span></span><br><span class="line">   <span class="keyword">constructor</span>(name,color) &#123;</span><br><span class="line">     <span class="keyword">this</span>.name = name;</span><br><span class="line">     <span class="keyword">this</span>.color = color;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// toString 是原型对象上的属性</span></span><br><span class="line">   toString() &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'name:'</span> + <span class="keyword">this</span>.name + <span class="string">',color:'</span> + <span class="keyword">this</span>.color);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> animal = <span class="keyword">new</span> Animal(<span class="string">'dog'</span>,<span class="string">'white'</span>);</span><br><span class="line">animal.toString();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animal.hasOwnProperty(<span class="string">'name'</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(animal.hasOwnProperty(<span class="string">'toString'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(animal.__proto__.hasOwnProperty(<span class="string">'toString'</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"> <span class="keyword">constructor</span>(action) &#123;</span><br><span class="line">   <span class="comment">// 子类必须要在constructor中指定super 方法，否则在新建实例的时候会报错.</span></span><br><span class="line">   <span class="comment">// 如果没有置顶consructor,默认带super方法的constructor将会被添加、</span></span><br><span class="line">   <span class="keyword">super</span>(<span class="string">'cat'</span>,<span class="string">'white'</span>);</span><br><span class="line">   <span class="keyword">this</span>.action = action;</span><br><span class="line"> &#125;</span><br><span class="line"> toString() &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">super</span>.toString());</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat(<span class="string">'catch'</span>)</span><br><span class="line">cat.toString();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例cat 是 Cat 和 Animal 的实例，和Es5完全一致。</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>上面代码首先用class定义了一个“类”，可以看到里面有一个constructor方法，这就是构造方法，而this关键字则代表实例对象。简单地说，constructor内定义的方法和属性是实例对象自己的，而constructor外定义的方法和属性则是所有实例对象可以共享的。<br>Class之间可以通过extends关键字实现继承，这比ES5的通过修改原型链实现继承，要清晰和方便很多。上面定义了一个Cat类，该类通过extends关键字，继承了Animal类的所有属性和方法。<br>super关键字，它指代父类的实例（即父类的this对象）。子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。<br>ES6的继承机制，实质是先创造父类的实例对象this（所以必须先调用super方法），然后再用子类的构造函数修改this。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;ES6提供了更接近传统语言的写法，引入了Class（类）这个概念。新的class写法让对象原型的写法更加清晰、更像面向对象编程的语法，也更加通俗易懂。&lt;br&gt;&lt;figure 
      
    
    </summary>
    
      <category term="前端" scheme="http://genghongshuo.com.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ES6" scheme="http://genghongshuo.com.cn/categories/%E5%89%8D%E7%AB%AF/ES6/"/>
    
    
      <category term="前端" scheme="http://genghongshuo.com.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ES6" scheme="http://genghongshuo.com.cn/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6 学习笔记总结</title>
    <link href="http://genghongshuo.com.cn/2017/11/23/ES6-%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://genghongshuo.com.cn/2017/11/23/ES6-知识点/</id>
    <published>2017-11-23T06:10:30.000Z</published>
    <updated>2018-08-21T08:06:46.406Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>  ECMAScript 6（以下简称ES6）是JavaScript语言的下一代标准。因为当前版本的ES6是在2015年发布的，所以又称ECMAScript 2015。</p><hr><h3 id="Babel转码器"><a href="#Babel转码器" class="headerlink" title="Babel转码器"></a>Babel转码器</h3><p><a href="https://babeljs.io/" target="_blank" rel="noopener">Babel</a><br>Babel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。大家可以选择自己习惯的工具来使用使用Babel，具体过程可直接在Babel官网查看：</p><hr><h3 id="let和const命令"><a href="#let和const命令" class="headerlink" title="let和const命令"></a>let和const命令</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>用来声明变量，但是所有声明的变量只在let命令所在的代码块中有效;<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure></p><p>变量i是let声明的，当前的i只在本轮循环有效，所以每一次循环的i其实都是一个新的变量，所以最后输出的是6。</p><h4 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h4><p>let命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// let 的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(error); <span class="comment">// 报错ReferenceError</span></span><br><span class="line"><span class="keyword">let</span> error = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></p><h4 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> n = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(n); <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的函数有两个代码块，都声明了变量n，运行后输出 5。这表示外层代码块不受内层代码块的影响。</p><h4 id="不能重复声明变量"><a href="#不能重复声明变量" class="headerlink" title="不能重复声明变量"></a>不能重复声明变量</h4><p>let不允许在相同作用域内，重复声明同一个变量。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 报错</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a; <span class="comment">// 报错</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">let</span> a; <span class="comment">// 不报错</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="const"><a href="#const" class="headerlink" title="const"></a>const</h4><p>const也用来声明变量，但是声明的是常量。一旦声明，常量的值就不能改变。<br>const命令的常量 也是不提升，同样存在暂时性死区，只在声明所在的块级作用域内有效.<br>const声明的常量，也与let一样不可重复声明。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">"Hello!"</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">const</span> message = <span class="string">"Goodbye!"</span>;<span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">30</span>;<span class="comment">// 报错</span></span><br><span class="line">和<span class="keyword">let</span>一样不可重复声明</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> fun = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">fun <span class="comment">// Uncaught ReferenceError: fun is not defined</span></span><br></pre></td></tr></table></figure><p>块级作用域</p><h3 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h3><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> &#125;;</span><br><span class="line">foo <span class="comment">// "aaa"</span></span><br><span class="line">bar <span class="comment">// "bbb"</span></span><br><span class="line">----------------------</span><br><span class="line"><span class="keyword">const</span> [a, b, c, d, e] = <span class="string">'hello'</span>;</span><br><span class="line">a <span class="comment">// "h"</span></span><br><span class="line">b <span class="comment">// "e"</span></span><br><span class="line">c <span class="comment">// "l"</span></span><br><span class="line">d <span class="comment">// "l"</span></span><br><span class="line">e <span class="comment">// "o"</span></span><br></pre></td></tr></table></figure></p><h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><p>ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。<br>它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。</p><p>注意，Symbol函数前不能使用new命令，否则会报错。这是因为生成的Symbol是一个原始类型的值，不是对象<br>Symbol函数可以接受一个字符串作为参数，表示对Symbol实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有参数的情况</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="built_in">Symbol</span>();</span><br><span class="line">s1 === s2 <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 有参数的情况</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="built_in">Symbol</span>(<span class="string">"foo"</span>);</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="built_in">Symbol</span>(<span class="string">"foo"</span>);</span><br><span class="line">s1 === s2 <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><p>s1和s2都是Symbol函数的返回值，而且参数相同，但是它们是不相等的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = <span class="built_in">Symbol</span>(<span class="string">'My symbol'</span>);</span><br><span class="line"></span><br><span class="line"><span class="string">"your symbol is "</span> + sym</span><br><span class="line"><span class="comment">// TypeError: can't convert symbol to string</span></span><br><span class="line"><span class="string">`your symbol is <span class="subst">$&#123;sym&#125;</span>`</span></span><br><span class="line"><span class="comment">// TypeError: can't convert symbol to string</span></span><br></pre></td></tr></table></figure><p>Symbol 值不能与其他类型的值进行运算，会报错</p><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>ES6 允许使用“箭头”（=&gt;）定义函数，支持expression 和 statement 两种形式。同时一点很重要的是它拥有词法作用域的this值，帮你很好的解决this的指向问题，这是一个很酷的方式，可以帮你减少一些代码的编写。<br>注意<br>（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。<br>（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。<br>（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。<br>（4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.s1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.s2 = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 箭头函数</span></span><br><span class="line">  setInterval(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.s1++, <span class="number">1000</span>);</span><br><span class="line">  <span class="comment">// 普通函数</span></span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.s2++;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timer = <span class="keyword">new</span> Timer();</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'s1: '</span>, timer.s1), <span class="number">3100</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'s2: '</span>, timer.s2), <span class="number">3100</span>);</span><br><span class="line"><span class="comment">// s1: 3</span></span><br><span class="line"><span class="comment">// s2: 0</span></span><br></pre></td></tr></table></figure></p><p>Timer函数内部设置了两个定时器，分别使用了箭头函数和普通函数。前者的this绑定定义时所在的作用域（即Timer函数），后者的this指向运行时所在的作用域（即全局对象）。所以，3100 毫秒之后，timer.s1被更新了 3 次，而timer.s2一次都没更新。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = <span class="string">'animal'</span></span><br><span class="line">    &#125;</span><br><span class="line">    says(say)&#123;</span><br><span class="line">        setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.type + <span class="string">' says '</span> + say)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">var</span> animal = <span class="keyword">new</span> Animal()</span><br><span class="line"> animal.says(<span class="string">'hi'</span>)  <span class="comment">//animal says hi</span></span><br></pre></td></tr></table></figure><p>当我们使用箭头函数时，函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。<br>并不是因为箭头函数内部有绑定this的机制，实际原因是箭头函数根本没有自己的this，它的this是继承外面的，因此内部的this就是外层代码块的this。</p><h3 id="Module语法"><a href="#Module语法" class="headerlink" title="Module语法"></a>Module语法</h3><p>在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。</p><p>ES6 模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。比如，CommonJS 模块就是对象，输入时必须查找对象属性。</p><h4 id="export"><a href="#export" class="headerlink" title="export"></a>export</h4><p>ES6将一个文件视为一个模块，上面的模块通过 export 向外输出了一个变量。一个模块也可以同时往外面输出多个变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// profile.js </span></span><br><span class="line"><span class="comment">//写法一：</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> firstName = <span class="string">'Michael'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> lastName = <span class="string">'Jackson'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> year = <span class="number">1958</span>;</span><br><span class="line"><span class="comment">//写法二：</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> firstName = <span class="string">'Michael'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> lastName = <span class="string">'Jackson'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> year = <span class="number">1958</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;firstName, lastName, year&#125;;</span><br></pre></td></tr></table></figure><h4 id="import命令"><a href="#import命令" class="headerlink" title="import命令"></a>import命令</h4><p>定义好模块的输出以后就可以在另外一个模块通过import引用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;name, age&#125; <span class="keyword">from</span> <span class="string">'./profile.js'</span></span><br></pre></td></tr></table></figure></p><h4 id="default"><a href="#default" class="headerlink" title="default"></a>default</h4><p>不用关系模块输出了什么，通过 export default 指令就能加载到默认模块，不需要通过 花括号来指定输出的模块,一个模块只能使用 export default 一次<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// default 导出</span></span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> </span>&#123; ... &#125;</span><br><span class="line"> <span class="comment">// 导入的时候不需要花括号</span></span><br><span class="line"> <span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">'./test.js'</span>;</span><br></pre></td></tr></table></figure></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>link： <a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">http://es6.ruanyifeng.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;  ECMAScript 6（以下简称E
      
    
    </summary>
    
      <category term="前端" scheme="http://genghongshuo.com.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ES6" scheme="http://genghongshuo.com.cn/categories/%E5%89%8D%E7%AB%AF/ES6/"/>
    
    
      <category term="前端" scheme="http://genghongshuo.com.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ES6" scheme="http://genghongshuo.com.cn/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>搭建hexo中遇到的坑</title>
    <link href="http://genghongshuo.com.cn/2017/11/15/hexo-pit/"/>
    <id>http://genghongshuo.com.cn/2017/11/15/hexo-pit/</id>
    <published>2017-11-15T10:20:40.000Z</published>
    <updated>2018-08-21T08:06:46.417Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="hexo-下的分类和表签无法显示，解决方法"><a href="#hexo-下的分类和表签无法显示，解决方法" class="headerlink" title="hexo 下的分类和表签无法显示，解决方法"></a>hexo 下的分类和表签无法显示，解决方法</h3><pre><code>打开页面的时候标签和分类总是提示Cannot GET /tags/这个错误 </code></pre><h4 id="新建一个页面"><a href="#新建一个页面" class="headerlink" title="新建一个页面"></a>新建一个页面</h4><pre><code>$ hexo new page &quot;tags&quot;</code></pre><h4 id="设置新建页面的类型"><a href="#设置新建页面的类型" class="headerlink" title="设置新建页面的类型"></a>设置新建页面的类型</h4><p>（\source\tags\index.md中查找设置）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2017-11-12 22:06:40</span><br><span class="line">tags: tags  #文章的标签</span><br><span class="line">---</span><br><span class="line">注意：冒号后面都需要添加一个空格</span><br></pre></td></tr></table></figure></p><h4 id="配置主题文件"><a href="#配置主题文件" class="headerlink" title="配置主题文件"></a>配置主题文件</h4><p>（主题_config.yml中设置）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  tags: /tags/ || tags  #确保已经打开</span><br></pre></td></tr></table></figure></p><h4 id="重新生成生成"><a href="#重新生成生成" class="headerlink" title="重新生成生成"></a>重新生成生成</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">如果上述都设置都没有问题还是不能生成页面</span><br><span class="line">看下是不是有缓存，清除下缓存</span><br><span class="line">看下你下载的主题是不是从官网上下载的  </span><br><span class="line">你下载从别人下载的会有些东西已经集成到了主题里的，建议你从官网上下载一个主题重新生成下 </span><br><span class="line">我用的是这个next</span><br><span class="line">[next主题下载官方文档](http://theme-next.iissnan.com/getting-started.html)</span><br></pre></td></tr></table></figure><h3 id="github上建立仓库注意点"><a href="#github上建立仓库注意点" class="headerlink" title="github上建立仓库注意点"></a>github上建立仓库注意点</h3><pre><code>设置仓库名字的时候 ghshuo.github.io ，其中ghshuo 必须要是你的用户名，其它名称无效将来你的网站访问地址就是 http://ghshuo.github.io </code></pre><h4 id="绑定自己的域名"><a href="#绑定自己的域名" class="headerlink" title="绑定自己的域名"></a>绑定自己的域名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">记录类型选A或CNAME，A记录的记录值就是ip地址，</span><br><span class="line">github(官方文档)提供了两个IP地址，192.30.252.153和192.30.252.154，</span><br><span class="line">这两个IP地址为github的服务器地址，两个都要填上，解析记录设置两个www和@，线路就默认就行了，</span><br><span class="line">CNAME记录值填你的github博客网址</span><br><span class="line"></span><br><span class="line">在source文件夹中新建一个CNAME文件（无后缀名），然后用文本编辑器打开，在首行添加你的网站域名，</span><br><span class="line">如http://xxxx.com，注意前面没有http://，也没有www，</span><br><span class="line">然后使用hexo g </span><br><span class="line">hexo d上传部署。</span><br><span class="line"></span><br><span class="line">![域名](hexo-pit/hexo-yuming.png)</span><br><span class="line"></span><br><span class="line">  最后一步：在根目录source中添加 CNAME文件（不需要添加任何后戳） 文件中写上你的域名</span><br></pre></td></tr></table></figure><h3 id="hexo文章中添加图片"><a href="#hexo文章中添加图片" class="headerlink" title="hexo文章中添加图片"></a>hexo文章中添加图片</h3><p>每次要把图片先上传到七牛的服务器然后再使用有点麻烦，下面的方法在本地加载</p><h4 id="修改主配置"><a href="#修改主配置" class="headerlink" title="修改主配置"></a>修改主配置</h4><p>主页配置中 _config.yml 中有 post_asset_folder: true    如果是flase 改成true</p><h4 id="hexo目录中执行"><a href="#hexo目录中执行" class="headerlink" title="hexo目录中执行"></a>hexo目录中执行</h4><p>npm install <a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="noopener">https://github.com/CodeFalling/hexo-asset-image</a> –save</p><h4 id="生成新的文章"><a href="#生成新的文章" class="headerlink" title="生成新的文章"></a>生成新的文章</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [hexo-pit] &lt;title&gt; 建一篇新文章hexo-pit </span><br><span class="line">下面会多出一个和新建文章hexo-pit名字一样的文件夹，这样也可以方便你管理文件资源。</span><br><span class="line">\source\_posts\下面会生成hexo-pit文件夹 如下：</span><br><span class="line">![图片标题](文件路径)</span><br><span class="line">生成html是&lt;img src=&quot;/2017/11/15/hexo-pit/hexo-img.jng&quot; alt=&quot;hexo-img&quot;&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/hexo-img.png" alt="添加名字图片文件夹所在"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>link <a href="https://segmentfault.com/a/1190000009544924" target="_blank" rel="noopener">next主题美化</a><br>link <a href="http://www.cnblogs.com/zhcncn/p/4097881.html" target="_blank" rel="noopener">hexo搭建博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;hexo-下的分类和表签无法显示，解决方法&quot;&gt;&lt;a href=&quot;#hexo-下的分类和表签无法显示，解决方法&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="Hexo" scheme="http://genghongshuo.com.cn/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://genghongshuo.com.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + github pages搭建博客</title>
    <link href="http://genghongshuo.com.cn/2017/11/10/Hexo+github%20pages%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://genghongshuo.com.cn/2017/11/10/Hexo+github pages搭建博客/</id>
    <published>2017-11-10T14:06:40.000Z</published>
    <updated>2018-08-21T08:06:46.407Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="/images/hexo-github.jpg" alt="2017年年度总结"><br><a id="more"></a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>  在技术成长的过程中，肯定会遇到各种各样的问题，为了方便节约重复问题的时间，同时也可以更方便的和很多朋友共同学习。程序猿这个道路上，只有不断的学习才能进步。<br>今天用Hexo + github pages搭建个人技术博客。</p><h3 id="node-js安装"><a href="#node-js安装" class="headerlink" title="node.js安装"></a>node.js安装</h3><p>  <a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js官方文档</a><br>  参考这个(nodejs官方文档)</p><h3 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><pre><code>1.GitHub Pages是一个静态站点托管服务， 是通过我们网站托管和发布的公开网页。2.github Pages学习成本低，相比其他搭建方式而已谈，不需要太多的服务器基础。3.轻量级的博客系统，没有麻烦的配置4.使用标记语言，比如Markdown</code></pre><h4 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h4><p> <a href="https://git-scm.com/" target="_blank" rel="noopener">git官网</a></p><p>  注册github<br>这里就不多说了，点击git注册地址<a href="https://github.com/join?source=header" target="_blank" rel="noopener">这里</a><br> 创建仓库</p><pre><code>- 先点击 new repository 创建仓库- 填写仓库名称    github用户名称.github.io- 确定创建</code></pre><p>  如下图：<br><img src="/images/github.png" alt="创建github"></p><h4 id="添加秘钥"><a href="#添加秘钥" class="headerlink" title="添加秘钥"></a>添加秘钥</h4><p>用git生成秘钥 ssh-keygen -t rsa -C “Github的注册邮箱地址”</p><p>id_rsa和id_rsa.pub 生成这个两个文件 打开id_rsa.pub文把秘钥填写到github上<a href="https://github.com/settings/keys" target="_blank" rel="noopener">这里</a></p><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p><a href="https://github.com/settings/keys" target="_blank" rel="noopener">hexo官方文档</a></p><h4 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h4><pre><code>$ npm install -g hexo-cli$ hexo init hexo 初始化文件夹$ cd hexo  切换到该路径$ npm install 安装hexo扩展插件</code></pre><h4 id="本地服务器查看"><a href="#本地服务器查看" class="headerlink" title="本地服务器查看"></a>本地服务器查看</h4><pre><code>$ npm install hexo-server --save$ hexo generate  生成静态页面$ hexo server$ hexo server -i 192.240.1.1  自定义iP运行</code></pre><p>安装完成后，输入以下命令以启动服务器，您的网站会在 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。</p><h4 id="线上部署"><a href="#线上部署" class="headerlink" title="线上部署"></a>线上部署</h4><pre><code>$ hexo generate --deploy$ hexo generate  生成静态页面npm install hexo-deployer-git --save$ hexo deploy 部署到github线上</code></pre><p>输入<a href="http://ghshuo.github.io" target="_blank" rel="noopener">http://ghshuo.github.io</a> 进行查看</p><p>hexo generate：<br>      生成静态文件。将我们的数据和界面相结合生成静态文件的过程。<br>      会遍历主题文件中的 source 文件夹（js、css、img 等静态资源），<br>      然后建立索引，<br>      然后根据索引生成 pubild 文件夹中，<br>      此时的 publid 文    件是由 html、 js、css、img 建立的纯静态文件<br>      可以通过 index.html 作为入口访问你的博客。</p><p>hexo deploy：</p><pre><code>部署文件。部署主要是根据在 _config.yml 中配置的 git 仓库或者 coding 的地址，将 public 文件上传至 github 或者 coding 中。然后再根据上面的 github 提供的 pages 服务呈现出页面。当然你也可以直接将你生成的 public 文件上传至你自己的服务器上。</code></pre><p> hexo 常用命令<br>      hexo new”postName” #新建文章<br>      hexo new page”pageName” #新建页面<br>      hexo clean # 删除静态页面至public目录<br>      hexo generate #生成静态页面至public目录<br>      hexo server #开启预览访问端口<br>      hexo deploy #将.deploy目录部署到GitHub<br>      hexo help # 查看帮助<br>      hexo version #查看Hexo的版本</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>我感觉hexo就是一个快速、简洁且高效的博客框架，对markdown文件的重新渲染引擎，生成静态网页，并且和GitHub Pages静态站点托管服务，通过我们网站托管和发布的公开网页。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>link <a href="https://segmentfault.com/a/1190000008784436" target="_blank" rel="noopener">hexo原理浅析</a><br>link <a href="https://juejin.im/post/598eeaff5188257d592e55bb#heading-1" target="_blank" rel="noopener">hexo原理</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/hexo-github.jpg&quot; alt=&quot;2017年年度总结&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://genghongshuo.com.cn/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://genghongshuo.com.cn/tags/Hexo/"/>
    
  </entry>
  
</feed>
